<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDBC相关操作</title>
    <url>/2022/08/03/JavaWeb/Mysql/JDBC%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="JDBC-Java-DataBase-Connectivity"><a href="#JDBC-Java-DataBase-Connectivity" class="headerlink" title="JDBC(Java DataBase Connectivity)"></a>JDBC(Java DataBase Connectivity)</h3><p>JDBC是使用Java语言操作关系型数据库的一套API，用一套Java代码操作不同的关系型数据库</p>
<span id="more"></span>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803142756.png" width=80%></div>

<p>实现步骤：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803142935.png" width=80%></div>

<h4 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接(8.x之后版本的配置方法)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        <span class="comment">// 需要显示关闭SSL和指定时区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;801299&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, pwd);</span><br><span class="line">        <span class="comment">// 3. 定义sql语句,mudb1中有一张student表,我们查询表结构</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象:statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 5. 执行sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">result</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">        <span class="comment">//resultset内部有一个可移动的光标，默认是指向第一条记录</span></span><br><span class="line">        <span class="comment">// 6. 查看结果</span></span><br><span class="line">        <span class="keyword">while</span>(result.next()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> result.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        result.close();</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JDBC’s-API详解"><a href="#JDBC’s-API详解" class="headerlink" title="JDBC’s API详解"></a>JDBC’s API详解</h4><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><p>驱动管理类是一个工具类，内部都是静态static方法，作用：</p>
<ul>
<li>注册驱动<br>上面的代码中，使用的是Class.forName，通过反射来获取类，但这个类的内部实际上是一个静态代码块，静态代码块会随着class的加载自动执行，从而实现了驱动注册</li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803151858.png" width=90%></div>

<blockquote>
<p>在5.0之后的jdbc驱动版本中，可以直接省略注册驱动这一步，会自动加载jar包中META-INF&#x2F;services&#x2F;java.sql.Driver文件中的驱动类</p>
</blockquote>
<ul>
<li>获取数据库连接<br>注册完成之后，就可以直接使用DriverManager这个类中的静态方法getConnection来获取数据库的连接，在方法中需要指定url、user、password，以完成数据库的连接</li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803152542.png" width=80%></div>

<h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>数据库连接对象，由上面getConnection静态方法产生，作用：</p>
<ul>
<li>获取执行SQL语句的对象，这个sql语句包含了之前学习的DDL、DML、DQL</li>
<li>管理事务</li>
</ul>
<p>获取执行SQL的对象createStatement，通过获取到的对象再执行相应的SQL语句</p>
<ul>
<li>普通执行SQL对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
<li>预编译SQL的执行SQL对象：防止SQL注入<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PreparedStatement prepareStatement(<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure></li>
<li>执行存储过程的对象(不常用)<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CallableStatement prepareCall(<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>事务管理</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803162415.png" width=80%></div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);  <span class="comment">// 手动开启事务</span></span><br><span class="line">    <span class="comment">// 执行sql1</span></span><br><span class="line">    <span class="comment">// 执行sql2</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception throwables) &#123;  <span class="comment">// 执行sql过程中产生异常才会回滚</span></span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><p>Statement支持DML、DDL、DQL语句</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803162944.png" width=80%></div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC API 详解：statement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCdemo2_statement</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行DML语句:对表中数据的增删改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">// 2. 获取连接(8.x之后版本的配置方法)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        <span class="comment">// 需要显示关闭SSL和指定时区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;801299&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, pwd);</span><br><span class="line">        <span class="comment">// 3. 定义sql语句,mudb1中有一张student表,我们查询表结构</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update student set english=90 where id=1&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象:statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 5. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);  <span class="comment">// 返回执行完DML语句后受影响的行数</span></span><br><span class="line">        <span class="comment">// 6. 查看结果</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行DDL语句:对数据库和数据库中表的相关操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDDL</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">// 2. 获取连接(8.x之后版本的配置方法)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        <span class="comment">// 需要显示关闭SSL和指定时区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;801299&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, pwd);</span><br><span class="line">        <span class="comment">// 3. 定义sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;drop database mydb2&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象:statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 5. 执行sql</span></span><br><span class="line">        stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><p>封装了DQL查询语句的结果</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803165015.png" width=80%></div>

<p>使用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(result.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//  int id = result.getInt(1);  // 也可传入列序，从1开始</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> result.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">english</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;english&quot;</span>);</span><br><span class="line">    System.out.println(id + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot; &quot;</span> + english);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将从student中查询到的数据封装成Student对象，并存储到ArrayList集合中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC中的ResultSet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> chinese;</span><br><span class="line">    <span class="type">int</span> english;</span><br><span class="line">    Student(<span class="type">int</span> id, String name, <span class="type">int</span> chinese, <span class="type">int</span> english) &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.chinese = chinese;</span><br><span class="line">        <span class="built_in">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCdemo3_resultset</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">// 2. 获取连接(8.x之后版本的配置方法)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        <span class="comment">// 需要显示关闭SSL和指定时区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;801299&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, pwd);</span><br><span class="line">        <span class="comment">// 3. 定义sql语句,mudb1中有一张student表,我们查询表结构</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象:statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 5. 执行sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">result</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">        <span class="comment">//resultset内部有一个可移动的光标，默认是指向第一条记录</span></span><br><span class="line">        <span class="comment">// 6. 查看结果/存储结果</span></span><br><span class="line">        ArrayList&lt;Student&gt; stu = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(result.next()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//            int id = result.getInt(1);  // 也可传入列序，从1开始</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> result.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">chinese</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;chinese&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">english</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;english&quot;</span>);</span><br><span class="line">            stu.add(<span class="keyword">new</span> <span class="title class_">Student</span>(id, name, chinese, english));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        result.close();</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="PreparedStatement-解决SQL注入的问题，同时预编译SQL"><a href="#PreparedStatement-解决SQL注入的问题，同时预编译SQL" class="headerlink" title="PreparedStatement(解决SQL注入的问题，同时预编译SQL)"></a>PreparedStatement(解决SQL注入的问题，同时预编译SQL)</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803165923.png" width=80%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803170214.png" width=80%></div>

<p>简单理解就是将之前SQL语句中固定的值用参数占位符来替代，再将参数传递进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的PreparedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCdemo4_preparedstatement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">// 2. 获取连接(8.x之后版本的配置方法)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        <span class="comment">// 需要显示关闭SSL和指定时区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;801299&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, pwd);</span><br><span class="line">        <span class="comment">// 3. 定义sql语句,mudb1中有一张student表,我们查询表结构</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student where english &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">// 5. 设置问号?的值</span></span><br><span class="line">        pstmt.setInt(<span class="number">1</span>, <span class="number">90</span>);  <span class="comment">// 给出参数的位置和值，位置从1开始</span></span><br><span class="line">        <span class="comment">// 6. 执行sql语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">result</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">        <span class="comment">// 7. 查看结果</span></span><br><span class="line">        <span class="keyword">while</span>(result.next()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> result.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">english</span> <span class="operator">=</span> result.getInt(<span class="string">&quot;english&quot;</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot; &quot;</span> + english);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        result.close();</span><br><span class="line">        pstmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="PreparedStatement原理"><a href="#PreparedStatement原理" class="headerlink" title="PreparedStatement原理"></a>PreparedStatement原理</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803171041.png" width=80%></div>

<p>1.首先是url要修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;serverTimezone=UTC&amp;useServerPrepStmts=true&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2.不要按照上面的内容修改my.ini文件，因为mysql8.0的my.ini文件中自带有这些设置，但没有开启，只需要去开启即可</strong></p>
<blockquote>
<p>注意mysql8.0的my.ini在C:\ProgramData\MySQL\MySQL Server 8.0</p>
</blockquote>
<p>找到my.ini文件后，按照下面截图进行修改即可</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803182231.png" width=80%></div>

<p>在java代码执行过程中，创建PreparedStatement的地方就会进行SQL语句的编译，当后面调用setxxx方法设置参数值，再进行SQL语句的执行，这样就完成了SQL语句的预编译，如果需要执行多条SQL语句，只需要修改参数，而原始的SQL语句只需要进行一次预编译，在创建PreparedStatement对象的时候就进行了编译</p>
<p>3.执行java代码后，可以从log文件中看到，prepare，也就是预编译</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803182725.png" width=80%></div>

<h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><h4 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803194725.png" width=80%></div>

<p><strong>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立。在数据库连接池中有若干个数据库的连接，需要访问数据库时，从连接池中分配一个连接给该用户，用完之后不会释放，而是归还到连接池中，实现资源复用</strong></p>
<h4 id="数据库连接池实现"><a href="#数据库连接池实现" class="headerlink" title="数据库连接池实现"></a>数据库连接池实现</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803195247.png" width=80%></div>

<h4 id="Driud使用步骤"><a href="#Driud使用步骤" class="headerlink" title="Driud使用步骤"></a>Driud使用步骤</h4><ul>
<li>导入jar包<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803195929.png" width=80%></div></li>
<li>定义配置文件<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803200000.png" width=80%></div></li>
<li>加载配置文件</li>
<li>获取数据库连接池对象</li>
<li>获取连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Druiddemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.导入jar包</span></span><br><span class="line">        <span class="comment">// 2.定义配置文件</span></span><br><span class="line">        <span class="comment">// 3.加载配置文件</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));  <span class="comment">// 查看当前路径</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">// 4.获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        <span class="comment">// 5.获取数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        <span class="comment">// 之后正常使用连接即可</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数与视图</title>
    <url>/2022/08/03/JavaWeb/Mysql/MySQL%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL多表操作</title>
    <url>/2022/08/03/JavaWeb/Mysql/MySQL%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储过程和触发器</title>
    <url>/2022/08/03/JavaWeb/Mysql/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基本操作</title>
    <url>/2022/08/01/JavaWeb/Mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="DDL-Data-Definition-Language-：数据定义语言"><a href="#DDL-Data-Definition-Language-：数据定义语言" class="headerlink" title="DDL(Data Definition Language)：数据定义语言"></a>DDL(Data Definition Language)：数据定义语言</h3><p>内容包括：</p>
<ul>
<li>对数据库的常用操作</li>
<li>对表结构的常用操作</li>
<li>修改表结构<span id="more"></span></li>
</ul>
<h4 id="1-对数据库的常用操作"><a href="#1-对数据库的常用操作" class="headerlink" title="1.对数据库的常用操作"></a>1.对数据库的常用操作</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220731211229.png" width=80%></div>

<h4 id="2-对表结构的常用操作"><a href="#2-对表结构的常用操作" class="headerlink" title="2.对表结构的常用操作"></a>2.对表结构的常用操作</h4><p>创建表</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801094747.png" width=80%></div>

<p>数据类型(对具体每列进行限定，选择原则：够用就行)</p>
<ul>
<li><p>数值类型</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801100054.png" width=80%></div>
</li>
<li><p>日期和时间类型</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801100521.png" width=80%></div>
</li>
<li><p>字符串类型</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801100454.png" width=80%></div></li>
</ul>
<h4 id="3-对表结构的其它常用操作"><a href="#3-对表结构的其它常用操作" class="headerlink" title="3.对表结构的其它常用操作"></a>3.对表结构的其它常用操作</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801100750.png" width=80%></div>

<ul>
<li><p>修改表添加列</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801101219.png" width=80%></div>
修改数据库就是：alter database, 修改表就是：alter table
</li>
<li><p>修改列名和类型</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801101658.png" width=80%></div>
</li>
<li><p>修改表删除列</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801101854.png" width=80%></div>
</li>
<li><p>修改表名</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801102051.png" width=80%></div></li>
</ul>
<h4 id="DDL代码样例"><a href="#DDL代码样例" class="headerlink" title="DDL代码样例"></a>DDL代码样例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">sql</span>不区分大小写<span class="operator">!</span></span><br><span class="line"># <span class="number">1.</span> 对数据库的操作</span><br><span class="line"># 查看所有数据库</span><br><span class="line"><span class="keyword">show</span> databases;  </span><br><span class="line"></span><br><span class="line"># 创建数据库if <span class="keyword">not</span>可省</span><br><span class="line"><span class="keyword">create</span> database mydb1;</span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> mydb1;  </span><br><span class="line"></span><br><span class="line"># 选择使用哪一个数据库</span><br><span class="line">use mydb1;  </span><br><span class="line"></span><br><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">drop</span> database mydb1;  </span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> mydb1;</span><br><span class="line"></span><br><span class="line"># 修改数据库编码(自身就是utf<span class="number">-8</span>)</span><br><span class="line"><span class="keyword">alter</span> database mydb1 <span class="type">character</span> <span class="keyword">set</span> utf8;  </span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 对表结构的操作</span><br><span class="line"># 创建表</span><br><span class="line">use mydb1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line">	sid <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">	age <span class="type">int</span>,</span><br><span class="line">	birth <span class="type">date</span>,</span><br><span class="line">	address <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	score <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 查看当前数据库所有的表</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"># <span class="number">4.</span> 查看指定表的创建语句</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br><span class="line"># <span class="number">5.</span> 查看表结构 description</span><br><span class="line"><span class="keyword">desc</span> student;</span><br><span class="line"># <span class="number">6.</span> 删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"># <span class="number">7.</span> 修改表结构</span><br><span class="line"># <span class="number">7.1</span> 添加列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> dept <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"># <span class="number">7.2</span> 修改列名和类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change dept department <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"># <span class="number">7.3</span> 删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> department;</span><br><span class="line"># <span class="number">7.4</span> 修改表名</span><br><span class="line">rename <span class="keyword">table</span> student <span class="keyword">to</span> std;</span><br></pre></td></tr></table></figure>
<h3 id="DML-Data-Manipuation-Language-：数据操作语言"><a href="#DML-Data-Manipuation-Language-：数据操作语言" class="headerlink" title="DML(Data Manipuation Language)：数据操作语言"></a>DML(Data Manipuation Language)：数据操作语言</h3><p>用于对数据库中表的数据记录进行更新，关键字：</p>
<ul>
<li>insert插入</li>
<li>delete删除</li>
<li>update更新</li>
</ul>
<h4 id="1-数据插入"><a href="#1-数据插入" class="headerlink" title="1.数据插入"></a>1.数据插入</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801103014.png" width=80%></div>

<h4 id="2-数据修改"><a href="#2-数据修改" class="headerlink" title="2.数据修改"></a>2.数据修改</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801103708.png" width=80%></div>

<h4 id="3-数据删除"><a href="#3-数据删除" class="headerlink" title="3.数据删除"></a>3.数据删除</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801104007.png" width=80%></div>

<h4 id="DML代码样例"><a href="#DML代码样例" class="headerlink" title="DML代码样例"></a>DML代码样例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># DML操作</span><br><span class="line"># <span class="number">1.</span> 数据的插入</span><br><span class="line"># 格式<span class="number">1</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (sid, name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Mxeron&#x27;</span>);  # 根据需求添加几列</span><br><span class="line"># 格式<span class="number">2</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> </span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;sxy&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2001-12-23&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>, <span class="number">80.5</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;xsy&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;2002-1-29&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>, <span class="number">81.5</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;iuy&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2000-8-13&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>, <span class="number">79.5</span>);</span><br><span class="line"># 所有列都要给值</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 数据的修改</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>, age<span class="operator">=</span><span class="number">21</span>, birth<span class="operator">=</span><span class="string">&#x27;2001-09-09&#x27;</span>, address<span class="operator">=</span><span class="string">&#x27;成都&#x27;</span>, score<span class="operator">=</span><span class="number">89</span></span><br><span class="line"><span class="keyword">where</span> sid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 数据的删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"># <span class="keyword">delete</span> <span class="keyword">from</span> student;  # 删除表中所有数据</span><br><span class="line"># <span class="keyword">truncate</span> <span class="keyword">table</span> student;  # 和上面的效果一样,但相当于创建新表</span><br><span class="line"># <span class="keyword">truncate</span> student;</span><br></pre></td></tr></table></figure>
<h4 id="DML练习"><a href="#DML练习" class="headerlink" title="DML练习"></a>DML练习</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建员工表employee,字段为:id, name, gender, salary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">use mydb1;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> employee(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">varchar</span>(<span class="number">8</span>),</span><br><span class="line">	salary <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入三条数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span></span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">2000</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">3200</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修改表结构:</span></span><br><span class="line"><span class="comment">1. 所有员工薪资修改为5000元</span></span><br><span class="line"><span class="comment">2. 将姓名为张三的员工薪资修改为3000元</span></span><br><span class="line"><span class="comment">3. 将姓名为李四的员工薪资修改为4000元，gender为女</span></span><br><span class="line"><span class="comment">4. 所有员工薪资在原有基础上+1000元</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># <span class="number">1.</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> salary<span class="operator">=</span><span class="number">5000</span>;</span><br><span class="line"># <span class="number">2.</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> salary<span class="operator">=</span><span class="number">3000</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"># <span class="number">3.</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> salary<span class="operator">=</span><span class="number">4000</span>, gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"># <span class="number">4.</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">1000</span>;  # 或者salary<span class="operator">+</span><span class="number">1000</span>	</span><br></pre></td></tr></table></figure>
<h3 id="MySQL约束-constraint"><a href="#MySQL约束-constraint" class="headerlink" title="MySQL约束(constraint)"></a>MySQL约束(constraint)</h3><p>约束实际上就是表中数据的限制条件，例如：手机号不能为空，身份证号不能重复</p>
<p>分类：</p>
<ul>
<li>主键约束primary key(PK)</li>
<li>自增长约束auto_increment</li>
<li>非空约束not null</li>
<li>唯一性约束unique</li>
<li>默认约束default</li>
<li>零填充约束zerofill</li>
<li>外键约束foreign key(FK)</li>
</ul>
<h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801110116.png" width=80%></div>

<p>需要注意<strong>联合主键</strong>，是多个列作为主键，只要唯一+非空即可</p>
<h4 id="添加单列主键"><a href="#添加单列主键" class="headerlink" title="添加单列主键"></a>添加单列主键</h4><p>创建单列主键方式有两种：一种是在定义字段的同时指定，另一种是定义完字段之后指定</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801211234.png" width=80%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801211656.png" width=80%></div>

<p>上方的constraint pk1可省</p>
<h4 id="添加多列主键-联合主键"><a href="#添加多列主键-联合主键" class="headerlink" title="添加多列主键(联合主键)"></a>添加多列主键(联合主键)</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801212034.png" width=80%></div>

<p>上图省略了constraint pk1，创建联合主键的方法只有一种，就是直接使用primary key(字段1,字段2,…)，<strong>并且联合主键的每一列都不能为空！</strong></p>
<h4 id="通过修改表结构添加主键"><a href="#通过修改表结构添加主键" class="headerlink" title="通过修改表结构添加主键"></a>通过修改表结构添加主键</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801212643.png" width=80%></div>

<p>同样单列、多列主键都可以</p>
<h4 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801213014.png" width=80%></div>

<p>删除单列、多列主键都是一样的，因为一个表只有一个主键，mysql知道该主键是哪列</p>
<h4 id="自增长约束-和主键约束配套使用"><a href="#自增长约束-和主键约束配套使用" class="headerlink" title="自增长约束(和主键约束配套使用)"></a>自增长约束(和主键约束配套使用)</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801213209.png" width=80%></div>

<p>自增长的主键，每增加一条记录，主键会自动以相同的步长进行增长，<strong>用于实现主键自增长，所以是和主键约束配套使用</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801213642.png" width=80%></div>

<h4 id="指定自增字段的初始值"><a href="#指定自增字段的初始值" class="headerlink" title="指定自增字段的初始值"></a>指定自增字段的初始值</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801213715.png" width=80%></div>

<p>也可以通过修改表结构来指定初始值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> xxx auto_increment<span class="operator">=</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h4 id="delete和truncate在删除所有数据后自增长列的变化"><a href="#delete和truncate在删除所有数据后自增长列的变化" class="headerlink" title="delete和truncate在删除所有数据后自增长列的变化"></a>delete和truncate在删除所有数据后自增长列的变化</h4><ul>
<li>delete数据之后自动增长从断点(上一次+1)开始</li>
<li>truncate数据之后自动增长从默认起始值开始</li>
</ul>
<h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801214249.png" width=80%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801214611.png" width=80%></div>

<h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801215014.png" width=80%></div>

<p>注意区分唯一约束和主键约束！</p>
<h4 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h4><p><strong>由于唯一约束所在列并不像主键约束那样唯一</strong>，所以需要指定<strong>约束名！</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">drop</span> index <span class="operator">&lt;</span>唯一约束名<span class="operator">/</span>列名<span class="operator">&gt;</span>;</span><br><span class="line"># 如果没有指定约束名，就用列名</span><br></pre></td></tr></table></figure>

<h4 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801215828.png" width=80%></div>

<h4 id="删除默认约束"><a href="#删除默认约束" class="headerlink" title="删除默认约束"></a>删除默认约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> change <span class="keyword">column</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> <span class="keyword">default</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="零填充约束-使用较少"><a href="#零填充约束-使用较少" class="headerlink" title="零填充约束(使用较少)"></a>零填充约束(使用较少)</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220801220557.png" width=80%></div>

<h4 id="MySQL约束代码样例"><a href="#MySQL约束代码样例" class="headerlink" title="MySQL约束代码样例"></a>MySQL约束代码样例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mydb1;</span><br><span class="line"># <span class="number">1.</span>主键约束</span><br><span class="line"># 添加主键方式<span class="number">1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp1(</span><br><span class="line">	eid <span class="type">int</span> <span class="keyword">primary</span> key,  # 主键约束</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	salary <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"># 添加主键方式<span class="number">2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2(</span><br><span class="line">	eid <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	salary <span class="keyword">double</span>,</span><br><span class="line">	<span class="keyword">constraint</span> pk1 <span class="keyword">primary</span> key(eid)  # 手动指定主键约束,<span class="keyword">constraint</span> pk1可省</span><br><span class="line">);</span><br><span class="line"># 联合主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp3(</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	deptid <span class="type">int</span>,</span><br><span class="line">	salary <span class="keyword">double</span>,</span><br><span class="line">	<span class="keyword">constraint</span> pk1 <span class="keyword">primary</span> key(name, deptid)  # 联合主键</span><br><span class="line">);</span><br><span class="line"># 联合主键测试</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp3 <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"># 修改表结构添加主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp4(</span><br><span class="line">	eid <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	salary <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp4 <span class="keyword">add</span> <span class="keyword">constraint</span> pk1 <span class="keyword">primary</span> key(eid);  # <span class="keyword">constraint</span> pk1可省</span><br><span class="line"></span><br><span class="line"># 删除主键约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp4 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>自增长约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp5(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp5 <span class="keyword">values</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;张三&#x27;</span>);  # 不给主键id的值，也可以自己赋值</span><br><span class="line"></span><br><span class="line"># 指定自增长约束的初始值</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp6(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">2</span>)</span><br><span class="line">)auto_increment<span class="operator">=</span><span class="number">100</span>;  # 初始值为<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp6 <span class="keyword">values</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 通过修改表结构来指定自增长约束的初始值</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp6 auto_increment<span class="operator">=</span><span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>非空约束</span><br><span class="line"># 方式<span class="number">1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp7(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,  # 主键自带非空</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	salary <span class="keyword">double</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"># 方式<span class="number">2</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp7 modify name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp7 <span class="keyword">values</span>(<span class="number">1</span>);  # 不可以</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp7 <span class="keyword">values</span>(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);  # 不可以</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp7 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;NULL&#x27;</span>,<span class="number">0</span>);  # 可以</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp7 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">2</span>);  # 可以，代表空串</span><br><span class="line"></span><br><span class="line"># 删除非空约束,不指定<span class="keyword">not</span> <span class="keyword">null</span>就删除了</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp7 modify name <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>唯一约束</span><br><span class="line"># 方式<span class="number">1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp8(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	phone_number <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>  # 唯一约束</span><br><span class="line">);</span><br><span class="line"># 方式<span class="number">2</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp8 <span class="keyword">add</span> <span class="keyword">constraint</span> uq1 <span class="keyword">unique</span>(phone_number);</span><br><span class="line"></span><br><span class="line"># 注意唯一约束可以为<span class="keyword">NULL</span>，且<span class="keyword">NULL</span>可以重复</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp8 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="keyword">NULL</span>);  # 可以</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp8 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;张四&#x27;</span>,<span class="keyword">NULL</span>);  # 这句也可以</span><br><span class="line"></span><br><span class="line"># 删除唯一约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp8 <span class="keyword">drop</span> index uq1;  # 如果没有指定约束名，就用列名</span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span>默认约束</span><br><span class="line"># 方式<span class="number">1</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp9;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp9(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">);</span><br><span class="line"># 在<span class="keyword">insert</span>时一定要指定列名，否则<span class="keyword">default</span>不会起作用</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp9 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="keyword">NULL</span>);  # <span class="keyword">default</span>不起作用</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp9(id,name) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;张三&#x27;</span>);  # 可以</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp9 modify address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 删除默认约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp9 change <span class="keyword">column</span> address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="DQL-Data-Query-Language"><a href="#DQL-Data-Query-Language" class="headerlink" title="DQL(Data Query Language)"></a>DQL(Data Query Language)</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802130559.png" width=80%></div>

<p><strong>数据库管理系统一个重要功能就是数据查询，所以DQL的学习十分重要。</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802130705.png" width=80%></div>

<h4 id="基本查询-数据准备"><a href="#基本查询-数据准备" class="headerlink" title="基本查询-数据准备"></a>基本查询-数据准备</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mydb1;</span><br><span class="line"># 创建商品表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">	pid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	pname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	price <span class="keyword">double</span>,</span><br><span class="line">	category_id <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"># 添加数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;海尔洗衣机&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;c001&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;美的冰箱&#x27;</span>,<span class="number">3000</span>,<span class="string">&#x27;c001&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;格力空调&#x27;</span>,<span class="number">2000</span>,<span class="string">&#x27;c001&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;九阳电饭煲&#x27;</span>,<span class="number">300</span>,<span class="string">&#x27;c001&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="基本查询-简单查询"><a href="#基本查询-简单查询" class="headerlink" title="基本查询-简单查询"></a>基本查询-简单查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product;</span><br><span class="line"># 查询商品名和商品价格</span><br><span class="line"><span class="keyword">select</span> pname, price <span class="keyword">from</span> product;</span><br><span class="line"># 别名查询，关键字为<span class="keyword">as</span>(<span class="keyword">as</span>可省)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">as</span> p;  # 表别名</span><br><span class="line"><span class="keyword">select</span> pname <span class="keyword">as</span> pn <span class="keyword">from</span> product;  # 列别名</span><br><span class="line"># 去除重复值</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> price <span class="keyword">from</span> product;  </span><br><span class="line"># 运算查询(对查询结果再进行运算)</span><br><span class="line"><span class="keyword">select</span> pname, price<span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> new_price <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<h4 id="基本查询-运算符"><a href="#基本查询-运算符" class="headerlink" title="基本查询-运算符"></a>基本查询-运算符</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802131726.png" width=80%></div>

<ul>
<li>算术运算符<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802131843.png" width=80%></div></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, price<span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> new_price <span class="keyword">from</span> product;</span><br><span class="line"><span class="keyword">select</span> name, price<span class="operator">*</span><span class="number">1.1</span> <span class="keyword">as</span> new_price <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>比较运算符</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802131929.png" width=80%></div>
</li>
<li><p>逻辑运算符</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802201520.png" width=80%></div>
</li>
<li><p>位运算符(了解)</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802201550.png" width=80%></div></li>
</ul>
<h4 id="运算符操作-条件查询"><a href="#运算符操作-条件查询" class="headerlink" title="运算符操作-条件查询"></a>运算符操作-条件查询</h4><p><strong>特别要注意模糊查询：like</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;海尔洗衣机&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">&gt;</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"># 查找价格不是<span class="number">800</span>的所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">!=</span> <span class="number">800</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">&lt;&gt;</span> <span class="number">800</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">not</span>(price <span class="operator">=</span> <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line"># 查询价格是<span class="number">200</span>或<span class="number">800</span>的所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="keyword">in</span>(<span class="number">200</span>,<span class="number">800</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">=</span> <span class="number">200</span> <span class="keyword">or</span> price <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">=</span> <span class="number">200</span> <span class="operator">||</span> price <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"># 查询区间</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">&gt;=</span> <span class="number">200</span> <span class="keyword">and</span> price <span class="operator">&lt;=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="keyword">between</span> <span class="number">200</span> <span class="keyword">and</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"># 查询含有’鞋‘字的所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%鞋%&#x27;</span>;  # <span class="operator">%</span>用来匹配任意多个字符(包括<span class="number">0</span>),模糊匹配</span><br><span class="line"></span><br><span class="line"># 查询以’海‘开头的所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;海%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查询第二个字为’车‘的所有商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_车%&#x27;</span>;  # 下划线匹配单个字符(必须占据一个字符)</span><br><span class="line"></span><br><span class="line"># 查询category_id为<span class="keyword">null</span>的商品</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> category_id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"># 不是<span class="keyword">null</span>: <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"># 用least求最小值</span><br><span class="line"><span class="keyword">select</span> least(<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>) <span class="keyword">as</span> small_number;</span><br><span class="line"><span class="keyword">select</span> least(<span class="number">5</span>,<span class="keyword">null</span>);  </span><br><span class="line"># 如果有一个值为<span class="keyword">null</span>，则结果直接为<span class="keyword">null</span>,最小<span class="operator">/</span>大值都一样</span><br><span class="line"></span><br><span class="line"># 用greatest求最大值</span><br><span class="line"><span class="keyword">select</span> greatest(<span class="number">10</span>,<span class="number">20</span>,<span class="number">5</span>) <span class="keyword">as</span> big_number;</span><br></pre></td></tr></table></figure>

<h4 id="基本查询-排序查询"><a href="#基本查询-排序查询" class="headerlink" title="基本查询-排序查询"></a>基本查询-排序查询</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802202756.png" width=80%></div>

<p>ASC升序，DESC降序，默认是升序，可以给出多个排序条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span>, category_id <span class="keyword">asc</span>;</span><br><span class="line"># 去重排序</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> price <span class="keyword">from</span> product <span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="基本查询-聚合查询"><a href="#基本查询-聚合查询" class="headerlink" title="基本查询-聚合查询"></a>基本查询-聚合查询</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802203106.png" width=80%></div>

<p>聚合函数是针对具体某一列而言，求这一列的最大、最小、平均、个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 求商品总数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(pid) <span class="keyword">from</span> product;  # 要以唯一的列来查</span><br><span class="line"># 求价格大于<span class="number">200</span>的商品总数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(pid) <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="operator">&gt;</span> <span class="number">200</span>;</span><br><span class="line"># 查询分类为<span class="string">&#x27;c001&#x27;</span>的所有商品的总和</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(price) <span class="keyword">from</span> product <span class="keyword">where</span> category_id <span class="operator">=</span> <span class="string">&#x27;c001&#x27;</span>;</span><br><span class="line"># 查询商品的最大、最小、平均价格</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(price) <span class="keyword">as</span> max_price,</span><br><span class="line"><span class="built_in">min</span>(price) <span class="keyword">as</span> min_price, </span><br><span class="line"><span class="built_in">avg</span>(price) <span class="keyword">as</span> avg_price <span class="keyword">from</span> product;</span><br><span class="line"># 注意上面的列名都可以使用列序号来代替</span><br></pre></td></tr></table></figure>

<h4 id="聚合查询有关NULL值的处理"><a href="#聚合查询有关NULL值的处理" class="headerlink" title="聚合查询有关NULL值的处理"></a>聚合查询有关NULL值的处理</h4><ul>
<li>count函数，不统计含null值的记录个数</li>
<li>sum、avg函数，忽略包含null值的该条记录</li>
<li>max、min函数，忽略null值的存在</li>
</ul>
<h4 id="基本查询-分组查询-非常重要"><a href="#基本查询-分组查询-非常重要" class="headerlink" title="基本查询-分组查询(非常重要)"></a>基本查询-分组查询(非常重要)</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802203833.png" width=80%></div>

<p>表结构如下：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802204006.png" width=80%></div>

<p><strong>会根据条件先进行分组，切分成若干个子表，然后再对子表执行相关的查询操作，每个子表的查询结果作为结果的一条记录。</strong></p>
<p>筛选过程：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802204530.png" width=80%></div>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 统计各分类商品的个数</span><br><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(pid) <span class="keyword">as</span> num <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br><span class="line"></span><br><span class="line"># 省市相同的同学一组</span><br><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">&#x27;省&#x27;</span>,<span class="string">&#x27;市&#x27;</span>;</span><br><span class="line"># 注意<span class="keyword">group</span> <span class="keyword">by</span>后面的条件可以有多个</span><br><span class="line"># 有多个时它们的值都必须一致，才能一组</span><br></pre></td></tr></table></figure>

<h4 id="分组查询-条件筛选having"><a href="#分组查询-条件筛选having" class="headerlink" title="分组查询-条件筛选having"></a>分组查询-条件筛选having</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802204832.png" width=80%></div>

<ul>
<li>where是对from进行筛选</li>
<li>group by是用来分组where子句的输出</li>
<li>having用来<strong>从分组select结果中筛选出记录(行)</strong></li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802205641.png" width=80%></div>

<p>从上面可以很直观的看到having的处理对象，是对分组之后select的结果表(当作是中间有表生成)进行处理</p>
<blockquote>
<p>书写顺序为：select … from … where … group by … having …</p>
</blockquote>
<h4 id="基本查询-分页查询limit"><a href="#基本查询-分页查询limit" class="headerlink" title="基本查询-分页查询limit"></a>基本查询-分页查询limit</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802205910.png" width=80%></div>

<p>最主要目的是对数据进行分页显示</p>
<h4 id="insert-into-select语句"><a href="#insert-into-select语句" class="headerlink" title="insert into select语句"></a>insert into select语句</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220802210138.png" width=80%></div>

<p>把table1的查询结果插入到table2，且前后table1、2的字段一定要一致</p>
<h4 id="DQL练习"><a href="#DQL练习" class="headerlink" title="DQL练习"></a>DQL练习</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># DQL练习</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	chinese <span class="type">int</span>,</span><br><span class="line">	english <span class="type">int</span>,</span><br><span class="line">	math <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张明&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">90</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李进&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">67</span>,<span class="number">53</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">87</span>,<span class="number">67</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;李一&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">87</span>,<span class="number">23</span>,<span class="number">53</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;李财&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">92</span>,<span class="number">53</span>,<span class="number">65</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;张宝&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">55</span>,<span class="number">92</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;黄蓉&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">75</span>,<span class="number">93</span>,<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span>查询所有学生的信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"># <span class="number">2.</span>查询表中所有学生的姓名和对应的英语成绩</span><br><span class="line"><span class="keyword">select</span> name,english <span class="keyword">from</span> student;</span><br><span class="line"># <span class="number">3.</span>过滤表中的重复数据</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"># <span class="number">4.</span>统计每个学生的总分</span><br><span class="line"><span class="keyword">select</span> name, chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="keyword">as</span> sum <span class="keyword">from</span> student;</span><br><span class="line"># <span class="number">5.</span>给所有学生总分加上<span class="number">10</span>分</span><br><span class="line"><span class="keyword">select</span> name, chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="operator">+</span> <span class="number">10</span> <span class="keyword">as</span> sum <span class="keyword">from</span> student;</span><br><span class="line"># <span class="number">6.</span>查询英语成绩大于<span class="number">90</span>分的同学</span><br><span class="line"><span class="keyword">select</span> name,english <span class="keyword">from</span> student <span class="keyword">where</span> english <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"># <span class="number">7.</span>查询总分大于<span class="number">200</span>分的同学</span><br><span class="line"># 错误：<span class="keyword">select</span> name,chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="keyword">as</span> sum <span class="keyword">from</span> student <span class="keyword">where</span> sum <span class="operator">&gt;</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">select</span> name,chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="keyword">as</span> sum <span class="keyword">from</span> student <span class="keyword">where</span> chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="operator">&gt;</span> <span class="number">200</span>;</span><br><span class="line"># <span class="number">8.</span>查询英语分数在<span class="number">80</span><span class="number">-90</span>之间的同学</span><br><span class="line"><span class="keyword">select</span> name,english <span class="keyword">from</span> student <span class="keyword">where</span> english <span class="operator">&gt;=</span> <span class="number">80</span>  <span class="operator">&amp;&amp;</span> english <span class="operator">&lt;=</span> <span class="number">90</span>;</span><br><span class="line"># <span class="number">9.</span>查询英语分数不在<span class="number">80</span><span class="number">-90</span>之间的同学</span><br><span class="line"><span class="keyword">select</span> name,english <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">not</span>(english <span class="operator">&gt;=</span> <span class="number">80</span> <span class="operator">&amp;&amp;</span> english <span class="operator">&lt;=</span> <span class="number">90</span>);</span><br><span class="line"># <span class="number">10.</span>查询数学分数为<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>的同学</span><br><span class="line"><span class="keyword">select</span> name,math <span class="keyword">from</span> student <span class="keyword">where</span> math <span class="keyword">in</span> (<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>);</span><br><span class="line"># <span class="number">11.</span>查询姓李的学生的英语成绩</span><br><span class="line"><span class="keyword">select</span> name,english <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line"># <span class="number">12.</span>对数学成绩降序排列后输出</span><br><span class="line"><span class="keyword">select</span> name, math <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> math <span class="keyword">desc</span>;</span><br><span class="line"># <span class="number">13.</span>将总分按照降序排列后输出</span><br><span class="line"><span class="keyword">select</span> name, chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="keyword">as</span> sum <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> sum <span class="keyword">desc</span>;</span><br><span class="line"># 注意<span class="keyword">order</span> <span class="keyword">by</span>可以用<span class="keyword">select</span>的别名，但<span class="keyword">where</span>不行！</span><br><span class="line"># <span class="number">14.</span>将姓李的同学的成绩降序排列后输出</span><br><span class="line"><span class="keyword">select</span> name, chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="keyword">as</span> sum </span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;李%&#x27;</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sum <span class="keyword">desc</span>;</span><br><span class="line"># <span class="number">15.</span>查询男生和女生分别有多少人，并将人数降序排序后输出，查询出人数大于<span class="number">3</span>的性别人数</span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(id) <span class="keyword">as</span> num </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender </span><br><span class="line"><span class="keyword">having</span> num <span class="operator">&gt;</span> <span class="number">3</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="基本查询-正则表达式"><a href="#基本查询-正则表达式" class="headerlink" title="基本查询-正则表达式"></a>基本查询-正则表达式</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803134326.png" width=80%></div>

<p>正则表达式本质上还是产生一个布尔值，看给定的字符串是否满足要求</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="operator">^</span>在字符串开始处进行匹配</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;^a&#x27;</span>;</span><br><span class="line"># $在字符串末尾开始匹配</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;a$&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;c$&#x27;</span>;</span><br><span class="line"># . 匹配除\n外的单个字符</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;.b&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;.c&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;a.&#x27;</span>;  # 满足</span><br><span class="line"># 注意:匹配不是指完全相同，只要是子串就可以(当然有特殊开始结束匹配的需要满足特定需求)</span><br><span class="line"># [...]匹配括号内任意的单个字符</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;[axx]&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;[xxx]&#x27;</span>;  # 不满足</span><br><span class="line"># [<span class="operator">^</span>...] <span class="operator">^</span>只在[]内才有取反的意思，在别的地方都是表示开始处匹配</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;[^abc]&#x27;</span>;  # 除abc意外的字符，不满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> regexp <span class="string">&#x27;[^xda]&#x27;</span>;  # 满足</span><br><span class="line"># a<span class="operator">*</span> 匹配<span class="number">0</span>个或多个a，包括空字符串，可以作为占位符，有没有字符都能匹配到数据</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stab&#x27;</span> regexp <span class="string">&#x27;.ta*b&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stb&#x27;</span> regexp <span class="string">&#x27;.ta*b&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#x27;</span> regexp <span class="string">&#x27;a*&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#x27;</span> regexp <span class="string">&#x27;(abc)*&#x27;</span>;  # 满足,代表abc这个组合出现<span class="number">0</span>次或多次</span><br><span class="line"># a<span class="operator">+</span> 匹配<span class="number">1</span>个或多个a</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stab&#x27;</span> regexp <span class="string">&#x27;.ta+b&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stb&#x27;</span> regexp <span class="string">&#x27;.ta+b&#x27;</span>;  # 不满足</span><br><span class="line"># a? 匹配<span class="number">0</span>个或<span class="number">1</span>个a</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stb&#x27;</span> regexp <span class="string">&#x27;a?&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;stab&#x27;</span> regexp <span class="string">&#x27;a?&#x27;</span>;  # 满足</span><br><span class="line"># a<span class="operator">|</span>b 匹配a或b</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> regexp <span class="string">&#x27;a|b&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;b&#x27;</span> regexp <span class="string">&#x27;^(a|b)&#x27;</span>;  # 满足,代表以a或b开头,这里的<span class="operator">^</span>不是非<span class="operator">!</span></span><br><span class="line"># a&#123;m&#125; 匹配m个a</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#x27;</span> regexp <span class="string">&#x27;a&#123;0&#125;&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> regexp <span class="string">&#x27;a&#123;1&#125;&#x27;</span>;  # 满足</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> regexp <span class="string">&#x27;a&#123;2&#125;&#x27;</span>;  # 不满足</span><br><span class="line"># a&#123;m,&#125; 匹配m个或者更多个a</span><br><span class="line"># a&#123;m,n&#125; 匹配[m,n]个a</span><br><span class="line"># (abc) 匹配abc这个整体</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引和事务</title>
    <url>/2022/08/03/JavaWeb/Mysql/MySQL%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven入门</title>
    <url>/2022/08/03/JavaWeb/Maven/Maven%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>Maven是专门用于管理和构建Java项目的工具，主要功能如下</p>
<span id="more"></span>
<ul>
<li>提供了一套标准化的项目结构，使得同一个java项目在eclipse、idea中打开之后项目结构都一样<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803201855.png" width=80%></div></li>
<li>提供了一套标准化的构建流程<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803202119.png" width=80%></div></li>
<li>提供了一套依赖管理机制，管理项目所依赖的第三方资源（jar包、插件…）<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803202327.png" width=80%></div></li>
</ul>
<p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(POM,project object model)的概念，通过一小段描述信息来管理项目的构建、报告和文档</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803202947.png" width=80%></div>

<p>一系列的jar包就放在本机的maven仓库中，通过在pom.xml文件中注入依赖，就可以导入jar包</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803203222.png" width=80%></div>

<p>仓库又分为本地仓库、中央仓库、远程仓库（私服）</p>
<ul>
<li>本地仓库：自己计算机上的文件夹</li>
<li>中央仓库：由Maven团队维护的全球唯一的仓库，地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li>
<li>远程仓库：由公司团队搭建的私有仓库</li>
</ul>
<p><strong>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包：</strong></p>
<ul>
<li>如果有，则在项目直接引用</li>
<li>如果没有，则去中央仓库中下载对应的jar包到本地仓库</li>
<li>还可以搭建远程创库，将来jar包的查找顺序变为：本地仓库-&gt;远程仓库-&gt;中央仓库</li>
</ul>
<h3 id="Maven安装配置"><a href="#Maven安装配置" class="headerlink" title="Maven安装配置"></a>Maven安装配置</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803203826.png" width=80%></div>

<blockquote>
<p>环境变量的配置需要注意：新建MAVEN_HOME值为maven的文件夹地址，然后再在Path中添加maven&#x2F;bin的地址</p>
</blockquote>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803204506.png" width=70%></div>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803204513.png" width=50%></div>

<p>如果不对本地仓库进行配置，则默认地址为:C:\Users\12294.m2\repository，但考虑到C盘空间紧缺，需要进行配置为D:\apache-maven-3.8.6\mvn_resp，也就是在maven安装地址下新建一个mvn_resp文件夹，用作本地仓库</p>
<p>找到maven安装地址下的conf&#x2F;settings.xml，修改如下：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803205111.png" width=80%></div>

<p>配置阿里云私服的目的是为了提高以后本地没有jar包的访问速度，找到maven安装地址下的conf&#x2F;settings.xml，修改如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要按照阿里云官方写的<a href="https://xxxx去配置,这样配置后需要对maven虚拟机进行ssl设置,比较麻烦/">https://xxxx去配置，这样配置后需要对maven虚拟机进行SSL设置，比较麻烦</a></p>
</blockquote>
<h3 id="Maven基本使用"><a href="#Maven基本使用" class="headerlink" title="Maven基本使用"></a>Maven基本使用</h3><ul>
<li><p>Maven常用命令</p>
<ul>
<li>compile：编译</li>
<li>clean：清理</li>
<li>test：测试</li>
<li>package：打包</li>
<li>install：安装</li>
</ul>
</li>
<li><p>Maven生命周期<br><strong>同一生命周期内，执行后边的命令，前面的所有命令会自动执行</strong></p>
</li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803205827.png" width=80%></div>

<h3 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h3><ul>
<li>IDEA配置Maven环境<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803210111.png" width=80%></div></li>
</ul>
<p>注意setting file要配置为之前新建的conf文件夹下的setting文件</p>
<blockquote>
<p>这个Maven环境的配置，一定要在idea的启动面板中修改，才是全局配置，否则只是对某个项目的配置</p>
</blockquote>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804101042.png" width=80%></div>


<ul>
<li><p>Maven坐标详解</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803212057.png" width=80%></div>
</li>
<li><p>IDEA创建Maven项目</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803212312.png" width=80%></div>
</li>
<li><p>IDEA导入Maven项目</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803213404.png" width=80%></div></li>
</ul>
<p>在使用maven进行compile的时候，可能会报错，原因是jdk版本不匹配，找到D:\apache-maven-3.8.6\conf下的settings.xml，修改如下(本质就是指定maven默认的jdk版本):</p>
<blockquote>
<p>一定要保证Idea中Maven配置中的目录配置为自己Maven所在目录!</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804084341.png" width=80%></div>
</blockquote>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804084238.png" width=80%></div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-11<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>11<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这种方法是一劳永逸的方法，当然也可以在每个Maven项目的pom.xml文件中进行管理，添加如下代码即可：<br>(xml中使用ctrl + shift + &#x2F; 可以获得更好的注释效果)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>同时要注意Idea中File-Settings中的Java Compiler是否也是jdk-11:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803215935.png" width=80%></div>

<p>Project Structure中的jdk版本也同样要为jdk-11:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803220012.png" width=80%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803220030.png" width=80%></div>

<p>可以在win10搜索栏输入cmd进入命令管理器，接着输入 Java -version 便会显示自己的jdk版本，配置完成后即可build success!</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220803220109.png" width=80%></div>

<p><strong>可能还会遇到点击Maven中的clean之后，再点击compile发现又出现了之前的错误，这个时候就一定要回去检查自己的Maven目录、jdk版本等是否配置好了，因为idea有时候打开后会重置之前设置好的Maven所在目录，需要再配置一遍!</strong></p>
<p>总结一下，一旦出现报错信息，先去看看idea中配置的jdk版本是否正确，maven的配置目录是否正确!</p>
<p>最后，为了方便Maven使用，可以安装一个Maven-Helper:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804085849.png" width=80%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804085922.png" width=60%></div>

<h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>使用坐标导入jar包:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804090108.png" width=70%></div>

<h4 id="pom-xml自动补全"><a href="#pom-xml自动补全" class="headerlink" title="pom.xml自动补全"></a>pom.xml自动补全</h4><p>注意，在写依赖导入jar包时，会发现idea没有自动补全，这是因为没有从中央仓库下载索引文件导致的，而阿里云镜像又没有索引文件，这时<strong>需要注释掉settings.xml中mirrors的设置部分</strong>，然后进入下图中对应的位置点击update(<strong>如果不注释掉mirrors代码，点击update后会报错，因为默认从阿里云镜像下载，但阿里云镜像中又没有需要的文件</strong>):</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804122802.png" width=80%></div>

<p>这个时候就发现，正在更新中央仓库:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804111242.png" width=50%></div>

<p>更新完成后，记得再去settings.xml中取消mirrors的注释</p>
<p>也可以在dependencies中右键点击generate:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804130903.png" width=60%></div>

<p>再选择add dependency:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804130931.png" width=30%></div>

<blockquote>
<p>高版本的maven可能会有一些新改动，不便于学习，所以最好把maven版本控制在3.6左右</p>
</blockquote>
<h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804131101.png" width=80%></div>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis入门</title>
    <url>/2022/08/04/JavaWeb/MyBatis/MyBatis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><p>MyBatis是一款优秀的<strong>持久层框架</strong>，用于简化JDBC开发<br>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<span id="more"></span>

<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>负责将数据保存到数据库中的那一层代码，JavaEE三层架构：表现层、业务层、持久层</p>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>框架是一个半成品软件，是一套可重用的、通用的、软件基础代码模型，在框架的基础上构建软件编写更加高效、规范、通用、可扩展</p>
<h3 id="JDBC的缺点"><a href="#JDBC的缺点" class="headerlink" title="JDBC的缺点"></a>JDBC的缺点</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804132913.png" width=70%></div>

<ul>
<li><p>硬编码(将字符串写入代码中，维护性较差)</p>
</li>
<li><p><strong>解决方案：使用配置文件</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804133046.png" width=70%></div>

</li>
<li><p>操作繁琐(需要手动设置参数，手动封装结果集)</p>
</li>
<li><p><strong>解决方案：一行代码解决</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804133115.png" width=80%></div></li>
</ul>
<blockquote>
<p>MyBatis免除了几乎所有的JDBC代码，以及设置参数和获取结果集的工作</p>
</blockquote>
<h3 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804164831.png" width=80%></div>

<h4 id="1-创建user表，添加数据"><a href="#1-创建user表，添加数据" class="headerlink" title="1. 创建user表，添加数据"></a>1. 创建user表，添加数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">	addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;234&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;345&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;成都&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-创建模块，导入坐标"><a href="#2-创建模块，导入坐标" class="headerlink" title="2. 创建模块，导入坐标"></a>2. 创建模块，导入坐标</h4><p>如何创建空项目用以导入模块，在创建项目时选择:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804170430.png" width=90%></div>

<p>这样创建的项目就是空项目，直接导入模块即可：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804170513.png" width=60%></div>

<p>在mybatis官网可以查看依赖导入方法：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804170807.png" width=80%></div>

<h4 id="3-编写MyBatis核心配置文件"><a href="#3-编写MyBatis核心配置文件" class="headerlink" title="3. 编写MyBatis核心配置文件"></a>3. 编写MyBatis核心配置文件</h4><p>从XML中构建SqlSessionFactory，也是根据mybatis官网上的内容来：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804173933.png" width=80%></div>

<blockquote>
<p>文件名为mybatis-config.xml，放在src&#x2F;main&#x2F;resources下</p>
</blockquote>
<p>根据自己的mysql信息进行配置即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span>  <span class="comment">&lt;!--mybatis是数据库名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;801299&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql的映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span>  <span class="comment">&lt;!--还没修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-编写SQL映射文件"><a href="#4-编写SQL映射文件" class="headerlink" title="4. 编写SQL映射文件"></a>4. 编写SQL映射文件</h4><p>下面还需要配置sql的映射文件：</p>
<blockquote>
<p>文件名：这个表存放的内容+Mapperxml，例如：UserMapper.xml，这么取只是为了方便查看，没有其它实际含义<br>放在src&#x2F;main&#x2F;resources下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置后为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mxeron.pojo.User&quot;</span>&gt;</span>  </span><br><span class="line">        /*User类是自己创建的*/</span><br><span class="line">        /*id是下面这条sql语句的唯一标识, resultType是返回结果的数据类型*/</span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再返回mybatis-config.xml中加载sql的映射文件：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804175147.png" width=80%></div>

<h4 id="5-编码实现功能"><a href="#5-编码实现功能" class="headerlink" title="5. 编码实现功能"></a>5. 编码实现功能</h4><p>先构建好User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alt + 鼠标左键可以实现整列编辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id      ;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String gender  ;</span><br><span class="line">    <span class="keyword">private</span> String addr    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alt + insert 选择getter、setter 选择所有变量即可一键构建</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alt + insert 选择toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再加载MyBatis核心配置文件，获取SqlSessionFactory，执行相应的sql语句，最后释放资源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxeron;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis 快速入门代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行sql，传入名称空间+sql的id名</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在项目中还配置了日志记录功能，下面讲讲如何配置：</p>
<p>首先导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加slf4j日志api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加logback-classic依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加logback-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在src&#x2F;main&#x2F;resources中新建一个logback.xml文件，内容如下，<strong>注意要修改下面内容中的路径！</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.out<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出格式：%d表示日期时间，%-5level：日志级别  ，%c取类 %thread表示线程名(在哪个方法执行)，</span></span><br><span class="line"><span class="comment">                %msg：日志消息，%n是换行符 ，不会用就去百度一下logback的日志格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[%-5level]  %c [%thread] :%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125;-%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>D:/java_logback/mxeron-data1.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件拆分和压缩规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过指定压缩文件的名称，来确定分割文件方式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>D:/java_logback/mxeron-data2-%d&#123;yyyy-MMdd&#125;.log%i.gz	<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件拆分大小 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- level:用来设计打印级别，大小写无关：TRACE,DEBUG,INFO,WARN,ERROR,ALL和OFF,默认debug</span></span><br><span class="line"><span class="comment">    &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素,标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：如果这里不配置关联打印位置，该位置将不会记录日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后就可以看到相应的日志信息：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804200130.png" width=70%></div>

<p>下面是日志文件记录：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804200139.png" width=70%></div>

<p>整个项目的路径如下：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804200231.png" width=30%></div>

<h3 id="在Idea中配置MySQL数据库连接"><a href="#在Idea中配置MySQL数据库连接" class="headerlink" title="在Idea中配置MySQL数据库连接"></a>在Idea中配置MySQL数据库连接</h3><p>为了在编写SQL映射Mapper文件时，没有警告提示，需要在Idea中建立与数据库的连接</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804200457.png" width=50%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804200706.png" width=70%></div>

<h3 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h3><p>仔细看上面的代码：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804201523.png" width=80%></div>

<p><strong>会发现红框中的代码，还是在硬编码！而且你还得去SQL映射文件中查名称空间 + 对应SQL语句的id，怎么处理？</strong></p>
<blockquote>
<p>Mapper代理开发，通过获取代理对象，使用代理对象执行相应的sql语句来解决原生方式中的硬编码，以及简化后期执行SQL</p>
</blockquote>
<h4 id="Mapper代理入门案例"><a href="#Mapper代理入门案例" class="headerlink" title="Mapper代理入门案例"></a>Mapper代理入门案例</h4><ol>
<li>定义与SQL映射文件<strong>同名的Mapper接口</strong>，并保证Mapper接口和SQL映射文件放置在同一个目录下：</li>
</ol>
<p>一定要保证java编译后生成的class文件和UserMapper.xml在同一目录，直接把UserMapper.xml放到java代码文件夹中并不妥当，因为我们是把code和resources分开放的，这就<strong>需要在resources中新建一个和上面src&#x2F;main&#x2F;java中的目录结构相同的文件夹，这样在java编译后，class文件和UserMapper.xml文件就可以在一起了!</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804202943.png" width=35%></div>

<blockquote>
<p>需要注意的是，resources中创建多级目录使用’&#x2F;‘，而不是’.’，’com&#x2F;mxeron&#x2F;mapper’</p>
</blockquote>
<p>修改了SQL映射文件的地址后还要回到mybatis-config.xml中修改mapper的地址：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220804204222.png" width=80%></div>

<ol start="2">
<li>设置SQL映射文件的namespace属性<strong>为Mapper接口全限定名</strong></li>
</ol>
<p>全限定名就是Mapper接口所在的位置：例如“com.mxeron.mapper.UserMapper”</p>
<ol start="3">
<li>在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</li>
</ol>
<p>类型一致是说：如果明确知道当前的sql语句会返回一个List，那就需要设置返回值类型为List<xxx></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口要和UserMapper.xml在同一目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;  <span class="comment">// 因为查询结果是集合</span></span><br><span class="line">    <span class="comment">// id和方法名一致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>编码<ol>
<li><strong>通过SqlSession的getMapper方法获取Mapper接口的代理对象</strong></li>
<li>调用对应方法完成sql语句的执行</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxeron;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis的代理开发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旧：执行sql，传入名称空间+sql的id名</span></span><br><span class="line">        <span class="comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新：代理开发，获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br></pre></td></tr></table></figure>

<p><strong>这句代码其实很让人产生疑惑，为什么传入接口.class，也就是类型，就可以获取相应SQL映射文件的代理对象？</strong></p>
<blockquote>
<p>关于getMapper的源码解析，可以见这篇文章：<a href="https://blog.csdn.net/qq_40645822/article/details/101844675">https://blog.csdn.net/qq_40645822/article/details/101844675</a></p>
</blockquote>
<p>使用Mapper代理方式后，可以很方便的加载sql映射文件，将mybatis-config.xml中的内容进行修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载sql的映射文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;com/mxeron/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--和sql映射文件同一目录，可以直接导入--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mapper代理方式，使用包扫描更方便加载，扫描包后自动识别出里面的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mxeron.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用前提：Mapper接口名和SQL映射文件名相同，且在同一目录下--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h3><p>顶层结构如下：</p>
<ul>
<li>properties:属性</li>
<li>settings:设置</li>
<li>typeAliases:类型别名</li>
<li>typeHandlers:类型处理器</li>
<li>objectFactory:对象工厂</li>
<li>plugins:插件</li>
<li>environment:环境配置<ul>
<li>environment:环境变量<ul>
<li>transactionManager:事务管理器</li>
<li>dataSource:数据源</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider:数据库厂商标识</li>
<li>mappers:映射器</li>
</ul>
<blockquote>
<p>配置各个标签时，需要遵守前后的顺序</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environments:配置数据库连接环境信息，可以配置多个environment，通过default属性切换不同的environment --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span>  <span class="comment">&lt;!--mybatis是数据库名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;801299&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 之后transactionManager 和 dataSource 的信息都会被Spring接管，这里就不需要管 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql的映射文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/mxeron/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--和sql映射文件同一目录，可以直接导入--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mapper代理方式，使用包扫描更方便加载，扫描包后自动识别出里面的映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mxeron.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用前提：Mapper接口名和SQL映射文件名相同，且在同一目录下--&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先是environments中可以设定多个数据库的environment，例如：development、test之类的，使用哪一个就将外面default设定为哪一个的id值，之后就可以动态切换数据源</p>
<p>可以在里面添加typeAliases，用于设置某个类型的别名，目的是为了简化：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">                alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名，且不区分大小写</span></span><br><span class="line"><span class="comment">                注意：默认的别名就是类名，且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定特定类型的别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.mxeron.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mxeron.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置好后就可以修改UserMapper.xml中resultType的内容，写为别名即可，注意不区分大小写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mxeron.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span>  /*User类是自己创建的*/</span><br><span class="line">        /*id是下面这条sql语句的唯一标识, resultType是返回结果的数据类型*/</span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ul>
<li>数据库表tb_brand</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,  # 主键</span><br><span class="line">  brand_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  ordered <span class="type">int</span>,  # 排序字段</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  status <span class="type">int</span>  # 状态:<span class="number">0</span>禁用 <span class="number">1</span>启用</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;三只松鼠&#x27;</span>, <span class="string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;好吃不上火&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">       (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;华为技术有限公司&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;华为致力于把数字世界带入每个人、每个家庭&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">       (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;小米科技有限公司&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;are you ok&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;</span><br></pre></td></tr></table></figure>

<ul>
<li>实体类Brand</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id          ;</span><br><span class="line">    <span class="keyword">private</span> String brandName  ;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> Integer ordered     ;</span><br><span class="line">    <span class="keyword">private</span> String description ;</span><br><span class="line">    <span class="keyword">private</span> Integer status      ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrandName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brandName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrandName</span><span class="params">(String brandName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brandName = brandName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompanyName</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(Integer ordered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, brandName=&#x27;&quot;</span> + brandName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, companyName=&#x27;&quot;</span> + companyName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试用例</li>
</ul>
<p>在src&#x2F;test&#x2F;java下创建相应的包和类:</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805125852.png" width=40%></div>

<ul>
<li>MyBatisX插件</li>
</ul>
<p>由之前的代码可以知道，每次需要查看UserMapper接口中的方法名和UserMapper.xml文件中SQL语句的id和resultType，保证两个文件中的内容是相互对应的:</p>
<p><strong>UserMapper接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口要和UserMapper.xml在同一目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;  <span class="comment">// 因为查询结果是集合</span></span><br><span class="line">    <span class="comment">// id和方法名一致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>UserMapper.xml映射文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mxeron.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span>  /*User类是自己创建的*/</span><br><span class="line">        /*id是下面这条sql语句的唯一标识, resultType是返回结果的数据类型*/</span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>要注意上下两个文件在编译后要处在同一目录</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805130850.png" width=30%></div>
</blockquote>
<p><strong>为了配置好这两个文件，每次都需要来回切换查看，就可以使用MyBatisX插件，方便进行配置!</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805131152.png" width=70%></div>

<p>安装之后可以直接点击旁边的小鸟进行相应映射文件的跳转：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805131330.png" width=70%></div>

<p>并且在UserMapper.java中写方法时，如果映射文件中没有相应的sql语句，会自动帮你创建，十分的方便!</p>
<h4 id="完成品牌数据的增删改查操作"><a href="#完成品牌数据的增删改查操作" class="headerlink" title="完成品牌数据的增删改查操作"></a>完成品牌数据的增删改查操作</h4><p>1.查询</p>
<ul>
<li>查询所有数据</li>
<li>查看详情</li>
<li>条件查询</li>
</ul>
<p>2.添加</p>
<p>3.修改</p>
<ul>
<li>修改全部字段</li>
<li>修改动态字段</li>
</ul>
<p>4.删除</p>
<ul>
<li>删除一个</li>
<li>批量删除</li>
</ul>
<blockquote>
<p>无论完成什么功能，无非就需要三步：</p>
<ul>
<li>编写Mapper接口方法<ul>
<li>参数？</li>
<li>结果类型？</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>编写mybatis模板，执行方法，完成测试</li>
</ul>
</blockquote>
<p>为了在写SQL映射文件时有SQL语句提示信息，可以按照下面进行配置：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805133440.png" width=70%></div>

<p>配置完成后就有提示啦：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805133515.png" width=60%></div>

<h5 id="查询select"><a href="#查询select" class="headerlink" title="查询select"></a>查询select</h5><p><strong>1. 查询</strong></p>
<p><strong>1.1 查询所有数据</strong></p>
<p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口要和BrandMapper.xml在同一目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置SQL映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mxeron.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为在mybatis-config.xml中配置的是包扫描，别名默认为类名--&gt;</span></span><br><span class="line">        select * from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSeletAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">        <span class="comment">// 4.执行方法</span></span><br><span class="line">        List&lt;Brand&gt; brands = brandMapper.selectAll();</span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意，数据库表中的字段名称如果跟实体类的属性名称不一致，则不能进行自动封装，解决方法：</strong></p>
<ul>
<li>第一种方法，在sql映射文件中写sql语句时，使用as关键字，来取别名，别名和实体类的属性名一致：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select id, brand_name as brandName, company_name as companyName xxxx from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缺点：每次写sql语句都要定义一次别名</li>
</ul>
<hr>
<ul>
<li>另一种方法，使用sql片段：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand_column&quot;</span>&gt;</span></span><br><span class="line">    id, brand_name as brandName, ompany_name as companyName, ordered, description, status</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;brand_column&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里完成对sql片段的引入 --&gt;</span></span><br><span class="line">    from tb_brand; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>缺点：不灵活</li>
</ul>
<hr>
<ul>
<li>第三种方法，最常用的：resultMap，根据具体的业务需求，完成数据库表中列名 到 实体类中属性名 的映射：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mxeron.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resultMap用于完成数据库表中列名 到 实体类的属性名的映射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id随便取，type为结果类型resultType，同样可以使用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id完成主键字段的映射，result完成一般字段的映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column是数据库表中的列名，property是实体类中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--填入resultMap的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>简单说就三步：编写接口方法-&gt;编写sql语句-&gt;编写执行方法，进行测试</p>
</blockquote>
<h4 id="resultMap和resultType的区别"><a href="#resultMap和resultType的区别" class="headerlink" title="resultMap和resultType的区别"></a>resultMap和resultType的区别</h4><p><strong>resultMap和resultType一样都是为了将表查询的结果集映射到自定义的实体类中。但在使用MyBatis进行表查询的时候可能会遇到两个问题：表的列名字段与实体类属性名不一致、多表查询需要将返回的结果集封装为多个实体类对象。这时候resultType便无法解决这两个问题，而resultMap可以根据配置信息将表的列名字段与实体类属性名直接进行映射，不需要像resultType一样需要表字段和属性名一致才能进行映射</strong>，所以resultMap包含了resultType的功能，并且还能完成表中列名-&gt;属性名的映射，这就是为什么后面无论什么情况都在使用resultMap，而没有用resultType的原因。</p>
<blockquote>
<p>但一般只在查询时才需要resultMap，因为此时是从数据库中拿数据存储到实体对象中</p>
</blockquote>
<p><strong>1.2 查看详情</strong></p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：哪个商品-id</li>
<li>结果：Brand，只返回一个商品的详情</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<p><strong>MyBatis如何接收参数？</strong></p>
<p><strong>MyBatis中的参数占位符</strong></p>
<ul>
<li><p>#{}:会将括号内部内容替换为 ?，为了防止SQL注入</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805141921.png" width=80%></div>
</li>
<li><p>${}:直接拼接括号内参数，存在SQL注入问题</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805142019.png" width=80%></div></li>
</ul>
<p>使用时机：</p>
<ul>
<li>参数传递时：#{}</li>
<li>表名或列名不固定的情况：${}，很少用，会有sql注入问题</li>
<li><strong>参数类型：在select标签中的parameterType：一般省略</strong></li>
<li><strong>特殊字符的处理：sql语句中大于号没有问题，小于号就要出错</strong><ul>
<li>转义字符：小于号：<code>&amp;lt;</code></li>
<li>CDATA区：写CD，Idea会补全</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdBrand&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id</span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">        &lt;</span><br><span class="line">        ]]&gt;</span><br><span class="line">        #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>这里只介绍了单参数的情况，之后会继续介绍多参数的处理方法</strong></p>
<hr>
<p>在之前使用resultMap的基础上进行代码编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口要和BrandMapper.xml在同一目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 查看详情：根据商品Id查询</span></span><br><span class="line">    <span class="keyword">public</span> Brand <span class="title function_">selectByIdBrand</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdBrand&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = #&#123;id&#125;;  <span class="comment">&lt;!--参数占位符#&#123;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.3 条件查询(使用较多)</strong></p>
<p><strong>1.3.1 多条件查询</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805152531.png" width=80%></div>

<p>可以看到有三个条件：当前状态(status)、企业名称(company_name)、品牌名称(brand_name)</p>
<blockquote>
<p>企业名称 和 品牌名称 <strong>都使用模糊查询like ?</strong></p>
</blockquote>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：状态、企业名称、品牌名称(所有所需的查询条件)</li>
<li>结果：List<Brand></li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<h4 id="MyBatis多参数传递"><a href="#MyBatis多参数传递" class="headerlink" title="MyBatis多参数传递"></a>MyBatis多参数传递</h4><p><strong>MyBatis如何实现多参数的传递？三种方式：</strong></p>
<p>sql映射文件都一样，不用变，先把sql语句写好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">        and company_name like #&#123;companyName&#125;</span><br><span class="line">        and brand_name like #&#123;brandName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.使用@Param()注解<br>2.封装成对象<br>3.封装成Map集合</p>
<p>sql映射相对应的接口代码(BrandMapper.java)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口要和BrandMapper.xml在同一目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看详情：根据商品Id查询</span></span><br><span class="line">    <span class="keyword">public</span> Brand <span class="title function_">selectByIdBrand</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询</span></span><br><span class="line"><span class="comment">     *  * 参数接受</span></span><br><span class="line"><span class="comment">     *      1. 散装参数：如果方法中有多个参数，需要使用<span class="doctag">@Param</span>(&quot;SQL语句中相应的占位符名称&quot;)</span></span><br><span class="line"><span class="comment">     *      2. 对象参数：对象的属性名称和参数占位符名称一致</span></span><br><span class="line"><span class="comment">     *      3. map集合参数：和对象参数类似，只不过用key-value形式进行存储</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> companyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public List&lt;Brand&gt; selectByCondition(@Param(&quot;status&quot;)int status,</span></span><br><span class="line"><span class="comment">//                                         @Param(&quot;companyName&quot;)String companyName,</span></span><br><span class="line"><span class="comment">//                                         @Param(&quot;brandName&quot;)String brandName);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public List&lt;Brand&gt; selectByCondition(Brand brand);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(Map map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSeletByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 接受参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面要处理参数以实现模糊匹配</span></span><br><span class="line">        companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="comment">// %用于匹配任意多个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">        <span class="comment">// 4.执行方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 4.1 使用@Param()注解</span></span><br><span class="line"><span class="comment">//        List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span></span><br><span class="line"><span class="comment">//        System.out.println(brands);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 4.2 封装对象</span></span><br><span class="line"><span class="comment">//        Brand brand = new Brand();</span></span><br><span class="line"><span class="comment">//        brand.setStatus(status);</span></span><br><span class="line"><span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line"><span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line"><span class="comment">//        List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span></span><br><span class="line"><span class="comment">//        System.out.println(brands);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.3 封装成Map集合</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;status&quot;</span>, status);</span><br><span class="line">        map.put(<span class="string">&quot;brandName&quot;</span>, brandName);</span><br><span class="line">        map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line"></span><br><span class="line">        List&lt;Brand&gt; brands = brandMapper.selectByCondition(map);</span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.3.2 多条件动态条件查询</strong></p>
<p><strong>思考这样一个问题，面对这样一个多条件查询，用户有可能并不会把所有条件都填写上，可能只写了brandName 或者 companyName，该如何实现？</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805152531.png" width=80%></div>

<h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>mybatis的官方介绍和讲解：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p>
<p><strong>我们需要SQL语句能够根据外部条件的变化而变化，称为动态SQL</strong></p>
<p>MyBatis对动态SQL有强大的支持：</p>
<ul>
<li>if</li>
<li>choose(when, otherwise)</li>
<li>trim(where, set)</li>
<li>foreach</li>
</ul>
<p><strong>只需要修改sql映射文件中内容，相对应的接口文件不用修改</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态条件查询</span></span><br><span class="line"><span class="comment">        if: 条件判断</span></span><br><span class="line"><span class="comment">            test:写逻辑表达式，and、or</span></span><br><span class="line"><span class="comment">        问题：第一个条件不能为null</span></span><br><span class="line"><span class="comment">            解决方法：</span></span><br><span class="line"><span class="comment">                * 把第一个条件写成恒等式：1=1，之前的第一个sql语句要添加and</span></span><br><span class="line"><span class="comment">                * &lt;where&gt; 替换 where 关键字，会自动去除and(推荐)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">              status = #&#123;status&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">              and company_name like #&#123;companyName&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">              and brand_name like #&#123;brandName&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>有了上面动态sql的支持，就可以完成多条件动态查询!</strong></p>
<p><strong>1.3.3 单条件动态条件查询</strong></p>
<p>顾名思义，实现一个条件的动态查询</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805163550.png" width=80%></div>

<p>choose(when, otherwise)进行选择，类似于Java中的switch语句</p>
<p>sql映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单条件动态查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where</span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                status=#&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                company_name like #&#123;companyName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                brand_name like #&#123;brandName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                1 = 1  /*这个恒等式一定要写，因为可能用户一个条件也没有输入!!!*/</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里也可以不用otherwise，而是将choose、when外面用where包裹起来，<strong>它们的最终目的都是为了避免所有条件为null时出现错误</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单条件动态查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                    status=#&#123;status&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                    company_name like #&#123;companyName&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                    brand_name like #&#123;brandName&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意上面的<xxx>后面都不要写注释，否则会报错</strong></p>
<p>映射文件对应的接口方法定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectByConditionSingle</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByConditionSingle</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 接受参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面要处理参数以实现模糊匹配</span></span><br><span class="line">        companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="comment">// %用于匹配任意多个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">        <span class="comment">// 4.执行方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装对象方法</span></span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setStatus(status);</span><br><span class="line"><span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line"><span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line">        List&lt;Brand&gt; brands = brandMapper.selectByConditionSingle(brand);</span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加insert"><a href="#添加insert" class="headerlink" title="添加insert"></a>添加insert</h5><p><strong>1. 添加</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805171451.png" width=80%></div>

<p>可以看到，用户添加时并不需要指定id值，所以一般将id设置为auto_increment，并且不会手动设置id，而是让它自动设置</p>
<p><strong>1.1 最基础的添加</strong></p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：除了id外所有数据</li>
<li>结果：void(也可以写成int，代表影响行数)</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<p>sql映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--普通添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    /*输入ins自动补全*/</span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应的接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通添加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 接受参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象方法</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    brand.setBrandName(brandName);</span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    brand.setDescription(description);</span><br><span class="line">    brand.setOrdered(ordered);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">    <span class="comment">// 4.执行方法</span></span><br><span class="line">    brandMapper.add(brand);</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行后发现数据并没有写到数据库中，发现下面的日志中</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805193531.png" width=80%></div>

<p>mybatis将自动提交给关闭了，执行了sql语句后又把事务roll back了，也就是说需要我们手动提交事务，需要在测试代码中加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805193835.png" width=80%></div>

<p>这样就成功提交了事务，也可以修改openSession的参数为true，这样就可以自动提交事务，不用再去手动提交</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h4 id="MyBatis事务"><a href="#MyBatis事务" class="headerlink" title="MyBatis事务"></a>MyBatis事务</h4><p><strong>MyBatis事务</strong></p>
<ul>
<li>openSession()：**默认开启事务(mybatis关闭了自动提交)**，进行增删改操作后需要使用sqlSession.commit();<strong>手动提交事务</strong></li>
<li>openSession(true)：可以设置为自动提交事务（关闭事务）</li>
</ul>
<p><strong>1.2 添加-主键返回</strong><br>在数据添加成功后，需要获取插入数据库数据的<strong>主键的值</strong>，举个例子：添加订单和订单项：</p>
<ul>
<li>添加订单</li>
<li>添加订单项，订单项中需要设置所属订单的id</li>
</ul>
<p>在数据添加后，调用brand.getId()得到的结果是null，是获取不到其Id值的，因为我们没有手动设置Id值，而是让数据库自己去给值，我们设定的是auto_increment，现在就需要去数据库里面拿到这个Id值</p>
<p>只需要在sql映射文件中添加如下内容即可将主键返回给id属性值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--主键返回--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    /*keyProperty代表将返回的主键赋值给哪个属性值，一个表只有一个主键!*/</span><br><span class="line">    /*输入ins自动补全*/</span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h5><p><strong>1. 修改</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805195456.png" width=80%></div>

<p><strong>1.1 修改全部字段</strong></p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：所有数据(id用于指定需要修改的数据id)</li>
<li>结果：void(也可以写成int，代表影响行数)</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<p>实现比较简单，直接给代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改全部字段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    set</span><br><span class="line">        brand_name = #&#123;brandName&#125;,</span><br><span class="line">        company_name = #&#123;companyName&#125;,</span><br><span class="line">        ordered = #&#123;ordered&#125;,</span><br><span class="line">        description = #&#123;description&#125;,</span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 接受参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 指定修改id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象方法</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    brand.setBrandName(brandName);</span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    brand.setDescription(description);</span><br><span class="line">    brand.setOrdered(ordered);</span><br><span class="line">    brand.setId(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">    <span class="comment">// 4.执行方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> brandMapper.update(brand);</span><br><span class="line">    System.out.println(update);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.2 修改动态字段(需要使用动态sql)</strong></p>
<p>例如修改密码时，用户只对密码进行了修改，并没有修改其它字段，这就需要修改动态字段</p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：部分数据</li>
<li>结果：void(也可以写成int，代表影响行数)</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<p>可以看看之前多条件动态查询的代码，进行类比</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态条件查询</span></span><br><span class="line"><span class="comment">        if: 条件判断</span></span><br><span class="line"><span class="comment">            test:写逻辑表达式，and、or</span></span><br><span class="line"><span class="comment">        问题：第一个条件不能为null</span></span><br><span class="line"><span class="comment">            解决方法：</span></span><br><span class="line"><span class="comment">                * 把第一个条件写成恒等式：1=1，之前的第一个sql语句要添加and</span></span><br><span class="line"><span class="comment">                * &lt;where&gt; 替换 where 关键字，会自动去除and(推荐)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">              status = #&#123;status&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">              and company_name like #&#123;companyName&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">              and brand_name like #&#123;brandName&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类比可以得到修改动态字段的动态sql代码，和<where></where>一样，set也使用<set></set>，可以让mybatis自动优化sql代码，避免全空时出错，以及最后一个值status&#x3D;null时，存在多余逗号的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改动态字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update tb_brand</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                brand_name = #&#123;brandName&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                company_name = #&#123;companyName&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">                ordered = #&#123;ordered&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                description = #&#123;description&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                status = #&#123;status&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h5><p><strong>1. 删除</strong></p>
<p>在下面的页面中可以看到一个单项删除按钮 和 批量删除按钮</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805201208.png" width=80%></div>

<p><strong>1.1 删除一个</strong></p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：id</li>
<li>结果：void((也可以写成int，代表删除行数))</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最主要的是下面的执行，上面都是写好的</span></span><br><span class="line">        <span class="comment">// 4.执行方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> brandMapper.deleteById(id);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.2 批量删除</strong></p>
<ul>
<li>编写Mapper接口方法：<ul>
<li>参数：id数组</li>
<li>结果：void((也可以写成int，代表删除行数))</li>
</ul>
</li>
<li>编写SQL语句，配置SQL映射文件</li>
<li>执行方法，测试</li>
</ul>
<h4 id="MyBatis数组参数的传递"><a href="#MyBatis数组参数的传递" class="headerlink" title="MyBatis数组参数的传递"></a>MyBatis数组参数的传递</h4><p>为了传递数组，需要使用@Param注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<p>在sql映射文件中，也要使用<foreach>来遍历ids数组中的每一个元素，以实现批量删除，因为不知道有多少个id要删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--批量删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定separator让多个id分隔开，并指定左右开闭符号，in(id1,id2,id3,...)--&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以不使用@Param注解，<strong>在mybatis中会将数组参数，封装为一个Map集合，默认键值对的关系为：array:数组，也就是说，可以写成下面这样</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--批量删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MyBatis底层的参数封装"><a href="#MyBatis底层的参数封装" class="headerlink" title="MyBatis底层的参数封装"></a>MyBatis底层的参数封装</h3><p>MyBatis接口方法中可以接受各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理</p>
<ul>
<li><p>单个参数：</p>
<ol>
<li>POJO类型：直接使用，<strong>属性名 和 sql语句的参数占位符一致即可</strong></li>
</ol>
<ul>
<li>POJO是Plain OrdinaryJava Object的缩写 可以当作简单的Java对象 实际就是普通JavaBeans 外文名 POJO 全称 Plain Ordinary Java Objec</li>
</ul>
<ol start="2">
<li>Map集合：直接使用，<strong>键名 和 sql语句的参数占位符一致即可</strong></li>
<li>Collection：<strong>封装为Map集合</strong><ul>
<li>map.put(“arg0”,collection集合)</li>
<li>map.put(“collection”,collection集合)</li>
</ul>
</li>
<li>List：封装为Map集合<ul>
<li>map.put(“arg0”,list集合)</li>
<li>map.put(“collection”,list集合)</li>
<li>map.put(“collection”,list集合)</li>
</ul>
</li>
<li>Array：<ul>
<li>map.put(“arg0”,array数组)</li>
<li>map.put(“array”,array数组)</li>
</ul>
</li>
<li>其他类型：直接使用，<strong>随便占位符写什么都可以，因为就只有单个参数传递</strong></li>
</ol>
</li>
<li><p>多个参数：封装为Map集合，下面是默认的键值对关系</p>
<ul>
<li>map.put(“arg0”,参数值1)</li>
<li>map.put(“param1”,参数值1)</li>
<li>map.put(“arg1”,参数值2)</li>
<li>map.put(“param2”,参数值2)</li>
<li>也就是说我们可以对参数不做任何处理，直接使用mybatis的默认值也可以</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(String username, String password)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where</span><br><span class="line">        username = #&#123;arg0&#125; and</span><br><span class="line">        password = #&#123;arg1&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样也可以查出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where</span><br><span class="line">        username = #&#123;param1&#125; and</span><br><span class="line">        password = #&#123;param2&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>诶！这样也可以！</p>
<p><strong>MyBatis提供了ParamNameResolver类来进行参数封装</strong></p>
<p>去到该类的源码，可以看到这么一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getNamedParams</span><span class="params">(Object[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span> <span class="variable">paramCount</span> <span class="operator">=</span> names.size();</span><br><span class="line">  <span class="keyword">if</span> (args == <span class="literal">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> args[names.firstKey()];</span><br><span class="line">    <span class="keyword">return</span> wrapToMapIfCollection(value, useActualParamName ? names.get(<span class="number">0</span>) : <span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">      param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">      <span class="comment">// add generic param names (param1, param2, ...)</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">String</span> <span class="variable">genericParamName</span> <span class="operator">=</span> GENERIC_NAME_PREFIX + (i + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">      <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">        param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> param;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，当有多个参数传入时，使用Map集合来存储参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p><strong>在有多个参数传入时，推荐使用@Param注解，用于替换Map集合中默认的arg&#x2F;param键名，来提高代码的可读性</strong></p>
<p>再点击wrapToMapIfCollection函数，进入，可以看到<strong>单个参数的封装情况</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">wrapToMapIfCollection</span><span class="params">(Object object, String actualParamName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">      ParamMap&lt;Object&gt; map = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;collection&quot;</span>, object);</span><br><span class="line">      <span class="keyword">if</span> (object <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;list&quot;</span>, object);</span><br><span class="line">      &#125;</span><br><span class="line">      Optional.ofNullable(actualParamName).ifPresent(name -&gt; map.put(name, object));</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;</span><br><span class="line">      ParamMap&lt;Object&gt; map = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;array&quot;</span>, object);</span><br><span class="line">      Optional.ofNullable(actualParamName).ifPresent(name -&gt; map.put(name, object));</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到：</p>
<ul>
<li>如果是Collection，mybatis中map默认的键值对有：arg0:Collection, collection:Collection</li>
<li>如果是List，还会在Collection的基础上，再多一个list:List的键值对</li>
<li>如果是Array，默认的键值对有：array:Array, arg0:Array</li>
</ul>
<blockquote>
<p>不管是什么，<strong>咱们都用上@Param注解，可以应对所有的情况，并且可读性更高！</strong></p>
</blockquote>
<blockquote>
<p>另外一个思考的点，我们知道，参数如果是Map集合，直接使用，<strong>键名 和 sql语句的参数占位符一致即可</strong>，如果Map集合中存放的是对象，在sql语句中该怎么写呢？</p>
</blockquote>
<p>首先，由于参数是Map集合，所以直接写Map中的键名就可以获取值，这个时候需要保持占位符中名称和Map中键名一致，通过user获取到user对象后，再对user对象点一下，就可以获得user对象内部的username 和 password，代码如下，比较有意思</p>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUsername(username);</span><br><span class="line">user.setPassword(password);</span><br><span class="line">map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.select(map);</span><br></pre></td></tr></table></figure>
<p>sql映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where</span><br><span class="line">        username = #&#123;user.username&#125;</span><br><span class="line">        and password = #&#123;user.password&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h3><p>就是将sql语句直接写入注解中，<strong>比配置文件开发更加方便！</strong></p>
<p>总共有四个注解：</p>
<ul>
<li>查询：@Select</li>
<li>添加：@Insert</li>
<li>修改：@Update</li>
<li>删除：@Delete</li>
</ul>
<p><strong>使用注解后直接在接口中的方法上写相应的注解即可，不需要再去sql映射文件中写代码。使用注解完成简单功能，配置文件完成复杂的功能！</strong></p>
<blockquote>
<p>来自mybatis官方文档的提醒：</p>
<ul>
<li>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让本就复杂的 SQL 语句更加混乱不堪。<strong>因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</strong></li>
<li>选择何种方式来配置映射，以及是否应该要统一映射语句定义的形式，完全取决于你和你的团队。 换句话说，永远不要拘泥于一种方式，<strong>你可以很轻松地在基于注解和 XML 的语句映射方式间自由移植和切换。</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2022/08/12/Algorithm/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h3 id="455-分发饼干-简单"><a href="#455-分发饼干-简单" class="headerlink" title="455.分发饼干(简单)"></a>455.分发饼干(简单)</h3><p><a href="https://leetcode.cn/problems/assign-cookies/">https://leetcode.cn/problems/assign-cookies/</a></p>
<p>思路：对于每个小孩，我们把刚好能够满足其胃口值的饼干分配给他，从小到大遍历小孩的胃口值和饼干，可以借助双指针，不用写双层for循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> g.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> s.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] &gt;= g[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="comment">// 当前饼干不能满足小孩胃口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="376-摆动序列-中等"><a href="#376-摆动序列-中等" class="headerlink" title="376.摆动序列(中等)"></a>376.摆动序列(中等)</h3><p><a href="https://leetcode.cn/problems/wiggle-subsequence/">https://leetcode.cn/problems/wiggle-subsequence/</a></p>
<p>思路：题目中说可以是子序列，意思是可以删除部分元素，换个理解角度，其实就是找波峰的位置，明确波峰出现的条件和特殊情况即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) <span class="keyword">return</span> len;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 前一个差值的正负标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;  <span class="comment">// 相同不算摆动</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] - nums[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre) <span class="keyword">continue</span>;  <span class="comment">// 上一次差为正值</span></span><br><span class="line">                pre = <span class="literal">true</span>;  <span class="comment">// 上一次是null 或 为负值</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; !pre) <span class="keyword">continue</span>;  <span class="comment">// 上一次差为负值</span></span><br><span class="line">                pre = <span class="literal">false</span>;  <span class="comment">// 上一次是null 或 为正值</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门</title>
    <url>/2022/08/05/JavaWeb/HTML/HTML%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>前端学习网站：<a href="https://www.w3school.com.cn/%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E5%AD%A6%E4%B9%A0%E5%8D%B3%E5%8F%AF%EF%BC%8C%E9%9D%9E%E5%B8%B8%E7%9A%84%E6%96%B9%E4%BE%BF%E3%80%82">https://www.w3school.com.cn/，只需要进入网站学习即可，非常的方便。</a></p>
<span id="more"></span>

<h3 id="什么是HTML？"><a href="#什么是HTML？" class="headerlink" title="什么是HTML？"></a>什么是HTML？</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220805215445.png" width=80%></div>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP入门</title>
    <url>/2022/08/13/JavaWeb/JSP%E5%92%8CServlet/JSP%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet入门</title>
    <url>/2022/08/06/JavaWeb/JSP%E5%92%8CServlet/Servlet%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806202630.png" width=80%></div>


<p><strong>HTTP-请求数据格式</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806203621.png" width=50%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806203904.png" width=50%></div>

<p><strong>经典面试问题：GET请求和POST请求的区别？</strong></p>
<ul>
<li>GET请求的请求参数在请求行中，没有请求体；POST请求的请求参数在请求体中</li>
<li>GET请求请求参数大小有限制；POST请求没有限制</li>
</ul>
<blockquote>
<p>这里的回答还不够全面，可以去查相关的面经</p>
</blockquote>
<p>请求数据分为三部分：</p>
<ul>
<li>请求行：请求数据的第一行，GET&#x2F;POST表示请求方式，&#x2F;表示请求资源路径，HTTP&#x2F;1.1表示协议版本</li>
<li>请求头：第二行开始，格式为key:value形式</li>
<li>请求体：POST请求的最后一部分，存放请求参数</li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806203610.png" width=70%></div>

<p><strong>HTTP-响应数据格式</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806204403.png" width=80%></div>

<p>状态码分类及说明：</p>
<ul>
<li>1xx：响应中，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</li>
<li>2xx：成功，表示请求已经成功被接收，处理已完成</li>
<li>3xx：重定向，重定向到其它地方，它让客户端再发起一个请求以完成整个处理</li>
<li>4xx：客户端错误，处理发生错误，责任在客户端，eg：客户端请求一个不存在的资源、客户端未被授权、禁止访问等</li>
<li>5xx：服务端错误，处理发生错误，责任在服务端，eg：服务端抛出异常、路由出错、http版本不支持等</li>
</ul>
<blockquote>
<p>这里的响应状态码所对应的信息也是经典面试问题，可以查看相关的面经</p>
</blockquote>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806204442.png" width=70%></div>

<h3 id="使用socket实现网络通信"><a href="#使用socket实现网络通信" class="headerlink" title="使用socket实现网络通信"></a>使用socket实现网络通信</h3><p>服务器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * socket搭建的服务器端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        serverSocket.setSoTimeout(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">                <span class="comment">// 侦听并接收到此套接字的连接</span></span><br><span class="line">                <span class="type">Socket</span> <span class="variable">server</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取客户端向服务器发送的信息</span></span><br><span class="line">                <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(server.getInputStream());</span><br><span class="line">                System.out.println(in.readUTF());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 服务器向客户端发送消息</span></span><br><span class="line">                <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(server.getOutputStream());</span><br><span class="line">                out.writeUTF(<span class="string">&quot;服务器连接成功！&quot;</span> + server.getLocalSocketAddress() + <span class="string">&quot;\nGoodbye!&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 关闭套接字</span></span><br><span class="line">                server.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SocketTimeoutException s) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Socket timed out!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;6666&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(port);</span><br><span class="line">            t.run();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * socket网络编程的客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverName</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;6666&quot;</span>);</span><br><span class="line">        <span class="comment">// 远程服务器端口号为6666，并没有指定客户端的端口号</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到主机：&quot;</span> + serverName + <span class="string">&quot;，端口号：&quot;</span> + port);</span><br><span class="line">            <span class="comment">// 创建一个流套接字，并将其连接到指定远程主机上的指定端口号</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverName, port);</span><br><span class="line">            System.out.println(<span class="string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 客户端向服务器发送消息</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outToServer</span> <span class="operator">=</span> client.getOutputStream();</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(outToServer);</span><br><span class="line">            out.writeUTF(<span class="string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 客户端接收服务器发送过来的消息</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inFromServer</span> <span class="operator">=</span> client.getInputStream();</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(inFromServer);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器响应：&quot;</span> + in.readUTF());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭套接字</span></span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要先启动服务器，然后再启动客户端，实现服务器和客户端间的信息传递</strong></p>
<p>客户端：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807115728.png" width=50%></div>

<p>服务器：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807115746.png" width=40%></div>

<blockquote>
<p>服务器的端口号是固定的：6666，而客户端的端口号是随机分配的；服务器使用的是：serverSocket，而客户端使用的是：Socket</p>
</blockquote>
<h3 id="使用socket实现HTTP服务器"><a href="#使用socket实现HTTP服务器" class="headerlink" title="使用socket实现HTTP服务器"></a>使用socket实现HTTP服务器</h3><p><strong>使用socket搭建HTTP服务器，java中的socket程序就是web服务器，客户端就是浏览器，通过浏览器向web服务器发起请求，所以只需要写好服务器端的代码即可。搭建的目的是体验没有web服务器，该怎么实现HTTP通信，能够更好地体现web服务器的好处</strong></p>
<p>HTTP服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP服务器端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Socket accept;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerSocket socket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedWriter bw;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器开启，等待连接....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 监听客户端连接，获取服务器套接字的输入(其实就是浏览器对服务器的请求)</span></span><br><span class="line">            accept = socket.accept();</span><br><span class="line">            <span class="comment">// getInputStream是获取浏览器的输入，需要向浏览器输出则为getOutputStream</span></span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(accept.getInputStream());</span><br><span class="line">            System.out.println(<span class="string">&quot;浏览器请求成功!&quot;</span>);</span><br><span class="line">            <span class="comment">// 读取浏览器的请求内容</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(r);</span><br><span class="line">            <span class="type">String</span> <span class="variable">readLine</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 打印请求消息</span></span><br><span class="line">            String filePath=<span class="string">&quot;log&quot;</span>;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(readLine != <span class="literal">null</span> &amp;&amp; !readLine.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                System.out.println(readLine);</span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                    String[] split = readLine.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (split[<span class="number">1</span>].endsWith(<span class="string">&quot;html&quot;</span>)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;html file: &quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">                        filePath += split[<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                readLine=br.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 响应客户端请求</span></span><br><span class="line">            System.out.println(filePath);</span><br><span class="line">            <span class="comment">// 响应就是把web页面展现在浏览器中</span></span><br><span class="line">            writeHtml(filePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器响应浏览器(客户端)请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeHtml</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//拼装http响应的数据格式</span></span><br><span class="line">        sb.append(<span class="string">&quot;http/1.1 200 ok&quot;</span>).append(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 服务器响应浏览器，向浏览器输出内容</span></span><br><span class="line">        bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(accept.getOutputStream()));</span><br><span class="line">        bw.write(sb.toString());</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入浏览器输入：<a href="http://localhost:8888/%EF%BC%8C%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E5%90%8E%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E5%93%8D%E5%BA%94%EF%BC%9A">http://localhost:8888/，向服务器发送请求，然后服务器收到请求后对请求进行响应：</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">服务器开启，等待连接....</span><br><span class="line">浏览器请求成功!</span><br><span class="line">---------------------</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: localhost:8888</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;103&quot;, &quot;Chromium&quot;;v=&quot;103&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.77</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: cookieconsent_status=dismiss; Idea-16111833=2dd6fce1-cbb9-4678-ae5b-57ee076becf9</span><br><span class="line">----------------------</span><br><span class="line">log</span><br><span class="line">浏览器请求成功!</span><br><span class="line">---------------------</span><br><span class="line">GET /favicon.ico HTTP/1.1</span><br><span class="line">Host: localhost:8888</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;103&quot;, &quot;Chromium&quot;;v=&quot;103&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.77</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Accept: image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Dest: image</span><br><span class="line">Referer: http://localhost:8888/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: cookieconsent_status=dismiss; Idea-16111833=2dd6fce1-cbb9-4678-ae5b-57ee076becf9</span><br><span class="line">----------------------</span><br><span class="line">log</span><br></pre></td></tr></table></figure>

<h3 id="什么是Web服务器"><a href="#什么是Web服务器" class="headerlink" title="什么是Web服务器"></a>什么是Web服务器</h3><p>Web服务器是一个应用程序（软件），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是“提供网上信息浏览服务”，把写好的web项目放在服务器软件中，把服务器软件启动之后，写好的web网页就可以通过浏览器进行访问</p>
<h3 id="什么是Tomcat"><a href="#什么是Tomcat" class="headerlink" title="什么是Tomcat"></a>什么是Tomcat</h3><p>Tomcat是Apache软件基金会一个核心项目，是一个<strong>开源免费的轻量级Web服务器</strong>，支持Servlet&#x2F;JSP，少量JavaEE规范，<strong>Tomcat又被称为Web容器、Servlet容器，Servlet需要依赖于Tomcat才能运行</strong></p>
<p>JavaEE：Java Enterprise Edition，Java企业版。指Java企业级开发的技术规范总和，包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p>
<h3 id="Tomcat的配置"><a href="#Tomcat的配置" class="headerlink" title="Tomcat的配置"></a>Tomcat的配置</h3><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807123141.png" width=80%></div>

<p>一定要根据自己的jdk版本去选择Tomcat的版本：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807123308.png" width=80%></div>

<p>Tomcat下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806200732.png" width=60%></div>

<p>解压到相应的目录，配置环境变量JAVA_HOME，Path里面要添加：%JAVA_HOME%\bin</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806200835.png" width=60%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806200855.png" width=40%></div>

<p><strong>注意，这里只用配置JAVA_HOME，不要配置JRE_HOME否则启动Tomcat要出错！</strong></p>
<p>配置完成后进入tomcat&#x2F;bin点击startup.bat，发现乱码</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806201009.png" width=80%></div>

<p>这时需要修改tomcat&#x2F;conf下的logging.properties中这部分代码的UTF-8为GBK即可</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806201231.png" width=80%></div>

<p>启动完成后，在浏览器输入localhost:8080，就可以看到可爱的小猫</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806201338.png" width=80%></div>

<h4 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806201812.png" width=20%></div>


<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220806201742.png" width=80%></div>

<h4 id="Tomcat部署项目"><a href="#Tomcat部署项目" class="headerlink" title="Tomcat部署项目"></a>Tomcat部署项目</h4><p>将项目放置到webapps目录下，即部署完成，一般JavaWeb项目会被打包成war包，将war包放到webapps目录下，Tomcat会自动解压缩war文件</p>
<h4 id="Idea中创建Maven-Web项目"><a href="#Idea中创建Maven-Web项目" class="headerlink" title="Idea中创建Maven Web项目"></a>Idea中创建Maven Web项目</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807124551.png" width=90%></div>

<p>打包完成后的JavaWeb项目中，除了网页所需的资源文件外，WEB-INF中的classes用于存放编译后的Java字节码文件，lib存放项目依赖的jar包，web.xml是Web项目配置文件</p>
<p><strong>使用骨架：</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807124849.png" width=80%></div>

<p>创建完成后修改pom.xml文件（就是删除一些不需要的内容）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;packaging&gt;打包方式：</span></span><br><span class="line"><span class="comment">  * jar包：默认值</span></span><br><span class="line"><span class="comment">  * war包：web项目</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原始目录结构如下，需要添加java和resources文件夹：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807125347.png" width=30%></div>

<p>修改后：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807125509.png" width=30%></div>


<p><strong>不使用骨架：</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807125851.png" width=100%></div>


<h4 id="在Idea中使用Tomcat"><a href="#在Idea中使用Tomcat" class="headerlink" title="在Idea中使用Tomcat"></a>在Idea中使用Tomcat</h4><p>每次部署项目都需要将项目打包成war包，放到tomcat的webapps目录中，再进行启动，十分不方便，可以在idea中更方便地启动！</p>
<p><strong>将本地Tomcat集成到Idea中，然后再进行项目的部署：</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807130240.png" width=100%></div>

<p><strong>使用Tomcat Maven插件：</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807130752.png" width=100%></div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;packaging&gt;打包方式：</span></span><br><span class="line"><span class="comment">  * jar包：默认值</span></span><br><span class="line"><span class="comment">  * war包：web项目</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--tomcat 插件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插件配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">          &lt;port&gt;8080&lt;/port&gt;</span></span><br><span class="line"><span class="comment">          &lt;path&gt;/&lt;/path&gt;</span></span><br><span class="line"><span class="comment">        &lt;/configuration&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意，目前tomcat插件只支持tomcat7</strong></p>
<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><strong>Servlet是Java提供的一门动态web资源开发技术，意思是指，不同用户访问，或访问的参数不同时，展示的页面也不同</strong></p>
<p>Servlet是JavaEE 规范之一，是一个接口，将来需要定义Servlet类实现Servlet接口，并由web服务器允许Servlet</p>
<h4 id="Servlet快速入门"><a href="#Servlet快速入门" class="headerlink" title="Servlet快速入门"></a>Servlet快速入门</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807133149.png" width=80%></div>

<p>Servlet依赖中，scope指定其作用范围：provided，在编译环境和测试环境中有效，在运行环境无效，也就是说在将项目打包成war包时，里面是没有servlet依赖的，因为Tomcat自带了servlet的jar包，如果不这样做会报错</p>
<p>pom.xml内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--一定要添加作用范围--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Servlet接口的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要加上访问路径</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">// 使用ctrl + i重写需要实现的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 当servlet被访问时，service会自动被执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用tomcat启动web项目，进入浏览器输入：<a href="http://localhost:8080/web-demo1/demo1">http://localhost:8080/web-demo1/demo1</a></p>
<p>&#x2F;demo1就是servlet实现类中配置的访问路径，访问对应路径后，即可看到控制台：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807134426.png" width=80%></div>

<h4 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="Servlet执行流程"></a>Servlet执行流程</h4><p><strong>我们没有创建servlet对象，也没有去执行方法，那这个service方法是怎么被执行的？</strong></p>
<p>这是我们之前的访问路径：<a href="http://localhost:8080/web-demo1/demo1">http://localhost:8080/web-demo1/demo1</a></p>
<p><a href="http://localhost:8080用来访问tomcat服务器">http://localhost:8080用来访问tomcat服务器</a></p>
<p>&#x2F;web-demo1用来访问响应的web项目</p>
<p>&#x2F;demo1访问servlet，访问servlet后，自动执行service方法，<strong>这个servlet对象是由tomcat服务器(web服务器)创建的，service方法也是由tomcat(web服务器)调用的</strong></p>
<p><strong>服务器怎么知道servlet中一定有service方法？</strong></p>
<p>因为我们必须要去定义实现类去实现servlet接口并重写其中的方法，这些方法中就包含service方法</p>
<h4 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h4><p><strong>执行流程明白了，那tomcat什么时候创建servlet对象？</strong></p>
<p>对象的生命周期是指一个对象从被创建到被销毁的整个过程，servlet也是一个对象，也有相应的生命周期</p>
<p><strong>Servlet运行在Servlet容器（web服务器）中，其生命周期由容器来管理，分为四个阶段：</strong></p>
<ol>
<li>加载和实例化：默认情况下，当Servlet<strong>第一次被访问</strong>时，由容器创建Servlet对象<ul>
<li><strong>非默认情况下，使用@WebServlet(urlPatterns&#x3D;”&#x2F;demo”,loadOnStartup&#x3D;0)，来指定创建对象的时机</strong><ol>
<li>取值为负整数：第一次被访问时创建Servlet对象</li>
<li>0或正整数：服务器启动时创建Servlet对象，数字越小优先级越高(用户访问servlet更快)</li>
<li>默认值：-1</li>
</ol>
</li>
</ul>
</li>
<li>初始化：在Servlet实例化后(修改servlet创建的时机，也就修改了init()被调用的时机)，容器将调用Servlet的init()方法，初始化这个对象，完成：加载配置文件、创建连接等初始化的工作。<strong>该方法只调用一次</strong></li>
<li>请求处理：<strong>每次请求Servlet时</strong>，Servlet容器都会调用Servlet的service()方法对请求进行处理</li>
<li>服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</li>
</ol>
<p>在idea中点击红色方块终止tomcat服务器，不会调用destroy()方法，需要在终端中使用mvn tomcat7:run方法启动tomcat服务器：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807142550.png" width=80%></div>

<p>然后再用ctrl+c正常终止tomcat服务器：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807142909.png" width=80%></div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要加上访问路径</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo2&quot;, loadOnStartup = 0)</span>  <span class="comment">// 启动服务器时实例化，这样不需要访问浏览器就可以创建servlet对象</span></span><br><span class="line"><span class="comment">//@WebServlet(urlPatterns = &quot;/demo2&quot;, loadOnStartup = -1)  // 默认</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">// 使用ctrl + i重写需要实现的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法：</span></span><br><span class="line"><span class="comment">     * 1. 调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 修改servlet创建的时机，也就修改了init()被调用的时机</span></span><br><span class="line"><span class="comment">     * 2. 调用次数：1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * service方法：每次访问servlet都会执行，每次刷新网页都会执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 当servlet被访问时，service会自动被执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法：servlet被销毁时调用</span></span><br><span class="line"><span class="comment">     * 销毁时机：内存释放或服务器关闭时，servlet对象被销毁(强制关闭无法执行)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807173847.png" width=100%></div>

<blockquote>
<p><strong>为了更好地理解Servlet的体系结构，一定要将继承、实现等关系理解清楚，哪些变量、方法能继承、重写等等</strong></p>
</blockquote>
<p><strong>更好的Web服务器端代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不按照上述方法，则需要在之前servlet中的service方法中，判断浏览器的请求是Get还是Post：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service方法：每次访问servlet都会执行，每次刷新网页都会执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 根据请求方式的不同，进行不同的处理</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">    <span class="comment">// 1. 获取请求方式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    <span class="comment">// 2. 判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Get...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>上面这种通过实现Servlet接口，并重写内部方法的做法太麻烦了，因为我们的类非抽象类，必须重写接口中的所有方法，十分笨重，所以才会有HttpServlet类的存在</strong></p>
</blockquote>
<p><strong>在HttpServlet类的内部，实际上就是做了上面类似的事情：</strong> HttpServlet类继承自GenericServlet抽象类，GenericServlet抽象类又实现了Servlet接口。HttpServlet内部对service方法进行了重写，将ServletRequest、ServletResponse强转为HttpServletRequest、HttpServletResponse，强转的前提是：<strong>Servlet的Request和Response都是HTTP协议下的</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    HttpServletRequest  request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class="line">            res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;non-HTTP request or response&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = (HttpServletRequest) req;</span><br><span class="line">    response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">    service(request, response);  <span class="comment">// 虽然方法名相同，但参数值类型不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service方法的最后又调用了另一个service方法，<strong>注意这个service方法是由protected修饰的，由无修饰符的实例方法、protected修饰的实例方法都可以被子类继承，这样，我们在开发项目时，就可以写一个自己定义的类，继承HttpServlet类，就可以继承其service方法，然后再根据需要重写doGet()、doPost()等方法(这些方法都是HttpServlet类提供的，子类继承后进行重写)，一定要记得service方法是tomcat调用的，是每次访问servlet对象时，都会执行的</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">            <span class="comment">// to go through further expensive logic</span></span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                maybeSetLastModified(resp, lastModified);</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">        maybeSetLastModified(resp, lastModified);</span><br><span class="line">        doHead(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">        doPut(req, resp);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">        doDelete(req, resp);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">        doOptions(req,resp);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">        doTrace(req,resp);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">        <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">        errArgs[<span class="number">0</span>] = method;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">        </span><br><span class="line">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> req.getProtocol();</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> req.getProtocol();</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承HttpServlet类后，根据请求方法的不同，重写不同的响应函数，不用再重写所有方法(这也是继承相比于接口的好处)</p>
<blockquote>
<p>最好的理解方式是去用Servlet接口和HttpServlet类去定义自己的servlet类，对于不懂的方法通过查阅源码，搞清楚里面的原理</p>
</blockquote>
<h4 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807210623.png" width=80%></div>

<ol>
<li>精确匹配：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：localhost:8080&#x2F;web-demo1&#x2F;user&#x2F;select</p>
<ol start="2">
<li>目录匹配：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：localhost:8080&#x2F;web-demo1&#x2F;user&#x2F;aaa(或&#x2F;bbb、或&#x2F;ccc…)</p>
<ol start="3">
<li>扩展名匹配：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：localhost:8080&#x2F;web-demo1&#x2F;aaa.do(或&#x2F;bbb.do)，主要是对扩展名有要求</p>
<ol start="4">
<li>任意匹配：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两种都可以</span></span><br><span class="line"><span class="comment">// @WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns=&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x2F; 和 &#x2F;* 的区别:</p>
<ul>
<li>当项目中的Servlet配置了”&#x2F;“，会覆盖掉tomcat中的DefaultServlet，当其他的url-pattern都匹配不上时，才会选择这个Servlet。tomcat中DefaultServlet为”&#x2F;“，它用于<strong>访问web项目中的静态资源</strong>，例如有一个a.html，直接&#x2F;a.html就可以在浏览器上进行访问，但是如果项目中的Servlet配置了”&#x2F;“，则会覆盖掉tomcat中DefaultServlet访问静态资源的功能！</li>
<li>当项目中配置了”&#x2F;*”，意味着匹配任意访问路径</li>
</ul>
<p>访问路径：localhost:8080&#x2F;web-demo1&#x2F;hehe(或者&#x2F;haha或者&#x2F;xxx)</p>
<blockquote>
<p>优先级顺序：精确匹配 &gt; 目录匹配 &gt; 扩展名匹配 &gt; &#x2F;* &gt; &#x2F;</p>
</blockquote>
<h4 id="XML配置方式编写Servlet"><a href="#XML配置方式编写Servlet" class="headerlink" title="XML配置方式编写Servlet"></a>XML配置方式编写Servlet</h4><p>Servlet从3.0版本后开始支持使用注解配置，3.0版本之前只能通过XML配置文件进行配置</p>
<p><strong>配置方法：</strong></p>
<ol>
<li>编写Servlet类(实现接口或继承父类)</li>
<li>在web.xml中配置该Servlet</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Servlet的全类名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo6<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mxeron.web.ServletDemo6<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Servlet的访问路径</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo6<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo6<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Request-请求-和-Response-响应"><a href="#Request-请求-和-Response-响应" class="headerlink" title="Request(请求) 和 Response(响应)"></a>Request(请求) 和 Response(响应)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 当servlet被访问时，service会自动被执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ServletRequest：</strong></p>
<p>浏览器向服务器发送请求，请求数据就是一些字符串：请求行、请求头、请求体，这些请求数据会被tomcat解析，然后被放到ServletRequest中，代表浏览器的请求数据，<strong>通过ServletRequest获取请求数据</strong></p>
<p><strong>ServletResponse：</strong></p>
<p>服务器向浏览器进行响应，响应的数据封装到ServletResponse中，设置响应数据</p>
<h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><h4 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807213328.png" width=80%></div>

<blockquote>
<p>注意：ServletRequest和HttpServletRequest都是接口，<strong>RequestFacade是Tomcat定义的实现类，由于是普通类实现接口，所以这个类中会实现接口中的所有方法</strong>。Service方法也是由Tomcat调用的，所以Service方法中所需的request、response对象都由Tomcat创建</p>
</blockquote>
<p><strong>注意，这里是利用接口变量调用其实现类的对象的方法 [接口回调对象]，接口回调对象只能访问接口的抽象方法，实际上是访问子类重写以后的抽象方法，不能访问子类新增的方法！(除非强转为子类对象)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 接口不能new，如果需要访问抽象方法需要借助接口子类</span></span><br><span class="line">		<span class="comment">//接口回调对象--接口的子类对象赋值给接口变量</span></span><br><span class="line">		TestInterface tin=<span class="keyword">new</span> <span class="title class_">TestSonClass</span>();</span><br><span class="line">		tin.info();</span><br><span class="line">		<span class="comment">//接口回调对象只能访问接口的抽象方法，实际上访问子类重写以后的抽象方法</span></span><br><span class="line">		<span class="comment">//接口回调对象不能访问子类本身的方法，如果要访问就需要强制类型转换</span></span><br><span class="line">		TestSonClass tc=(TestSonClass)tin;</span><br><span class="line">		tc.test1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Tomcat需要解析浏览器的请求数据，封装成request对象，并且创建request对象传递到service方法中</li>
<li>使用request对象，只需要查阅HttpServletRequest接口中的方法即可</li>
</ol>
<p>可以看到request对象的地址：</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220807214000.png" width=50%></div>

<h4 id="Request获取请求数据"><a href="#Request获取请求数据" class="headerlink" title="Request获取请求数据"></a>Request获取请求数据</h4><p>这里是说HttpServletRequest</p>
<p>请求数据分为三部分：</p>
<ol>
<li>请求行</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809153642.png" width=60%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809133340.png" width=80%></div>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/req1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo6</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        System.out.println(req.getMethod());</span><br><span class="line">        <span class="comment">// 获取虚拟目录(项目访问路径):/request-demo</span></span><br><span class="line">        System.out.println(req.getContextPath());</span><br><span class="line">        <span class="comment">// 获取URL(统一资源定位符):http://localhost:8080/web-demo1/req1</span></span><br><span class="line">        System.out.println(req.getRequestURL());</span><br><span class="line">        <span class="comment">// 获取URI(统一资源标识符):/web-demo1/req1</span></span><br><span class="line">        System.out.println(req.getRequestURI());</span><br><span class="line">        <span class="comment">// 获取请求参数(Get方式):username=zhangsan</span></span><br><span class="line">        System.out.println(req.getQueryString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:8080/web-demo1/req1?username=zhngsan">http://localhost:8080/web-demo1/req1?username=zhngsan</a></p>
<ol start="2">
<li>请求头</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809153713.png" width=60%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809153741.png" width=80%></div>
 

<ol start="3">
<li>请求体(只有Post请求才有请求体)</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809153826.png" width=60%></div>

<p>以字符流的形式进行获取，如果上传图片、文件、视频就用字节流输入</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809153849.png" width=80%></div>

<h4 id="Request通用方式获取请求参数"><a href="#Request通用方式获取请求参数" class="headerlink" title="Request通用方式获取请求参数"></a>Request通用方式获取请求参数</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809202029.png" width=50%></div>

<p><strong>思考：GET请求方式和POST请求方式，区别主要在于获取请求参数的方式不同，是否可以提供一种统一获取请求参数的方法，从而统一doGet和doPost方法内的代码？</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809202712.png" width=80%></div>

<p><strong>上面的方式是get、post请求方法通用的，需要这么做是因为get、post所进行的操作一样</strong></p>
<p><strong>使用Servlet模板创建Servlet：</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809204013.png" width=80%></div>

<p>按照下面的方法就可以很容易地创建Servlet！</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809204503.png" width=80%></div>

<h4 id="Request请求参数中文乱码处理"><a href="#Request请求参数中文乱码处理" class="headerlink" title="Request请求参数中文乱码处理"></a>Request请求参数中文乱码处理</h4><p>请求参数中有中文会乱码！</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809204953.png" width=10%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220809212012.png" width=100%></div>

<p>首先要明白utf-8的编码方式，我们现在写的是Servlet的代码，是在tomcat中运行的，所以拿到的request的请求参数的编码方式是：ISO-8859-1，拿到后，我们参数使用ISO-8859-1进行解码，获得相应的字节数据(字节数组，每个元素就是一个字节)，然后再将字节数组按照utf-8的方式转换为字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中文乱码解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo7</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 解决乱码：Post，getReader()，通过字符流获取，只需要设置字符流的编码为：UTF-8</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决乱码：Get，getQueryString()，获取的是字符串，不是流</span></span><br><span class="line">        <span class="comment">// 乱码原因：浏览器对URL编码采用UTF-8，而tomcat对URL解码采用ISO-8859-1，编解码的方式不同导致乱码</span></span><br><span class="line">        <span class="comment">// 这种处理方式，Post也适用！</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="line">        username = <span class="keyword">new</span> <span class="title class_">String</span>(bytes, StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tomcat8.0之后，已经解决了GET请求乱码问题，设置了默认的解码方式为：UTF-8</p>
</blockquote>
<h4 id="Request请求转发"><a href="#Request请求转发" class="headerlink" title="Request请求转发"></a>Request请求转发</h4><p>请求转发forward：一种在服务器内部的资源跳转方式</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810113345.png" width=50%></div>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810113704.png" width=50%></div>

<p>目的是在转发过程中增加新的数据，<strong>资源B的路径不需要添加虚拟目录</strong></p>
<p><strong>请求转发的特点：</strong></p>
<ol>
<li>浏览器地址栏路径不会发生变化</li>
<li>只能转发到当前服务器的<strong>内部资源</strong></li>
<li><strong>转发只有一次请求，可以在转发的资源间使用request共享数据</strong></li>
</ol>
<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>用于设置响应数据，响应数据也分为三部分：响应行、响应头、响应体</p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810114051.png" width=80%></div>

<p>和Request一样的体系结构，<strong>并且同样使用接口回调对象来调用对象重写接口中的方法</strong></p>
<h4 id="Response设置响应数据功能介绍"><a href="#Response设置响应数据功能介绍" class="headerlink" title="Response设置响应数据功能介绍"></a>Response设置响应数据功能介绍</h4><div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810114600.png" width=60%></div>

<h4 id="Response重定向"><a href="#Response重定向" class="headerlink" title="Response重定向"></a>Response重定向</h4><p><strong>resp1 跳转到 resp2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespsonseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1...&quot;</span>);</span><br><span class="line"><span class="comment">//        // 重定向</span></span><br><span class="line"><span class="comment">//        // 1. 设置响应状态码 302</span></span><br><span class="line"><span class="comment">//        response.setStatus(302);</span></span><br><span class="line"><span class="comment">//        // 2. 设置响应头 Location, value为重定向的资源路径，注意这里要加上项目的目录</span></span><br><span class="line"><span class="comment">//        response.setHeader(&quot;Location&quot;, &quot;/web-demo1/resp2&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化重定向</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/web-demo1/resp2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespsonseDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向的特点：</strong></p>
<ol>
<li>浏览器地址栏路径发生变化</li>
<li>可以重定向到任意位置的资源（服务器内部、外部都可以，<a href="https://www.baidu.com)/">https://www.baidu.com）</a></li>
<li>整个过程涉及<strong>两次</strong>请求，<strong>不能</strong>在多个资源使用request共享数据</li>
</ol>
<p>重定向的过程浏览器会发起两次请求，<strong>两次请求将来就会有两个request域，就不能够进行资源共享！</strong></p>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810115732.png" width=80%></div>


<h4 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h4><p>在request进行请求转发时，<strong>转发的路径是没有添加虚拟目录的：&#x2F;req2</strong>；而在response进行重定向时，<strong>重定向的路径是添加了虚拟目录的：&#x2F;web-demo1&#x2F;resp2</strong>，这是为什么？</p>
<p><strong>明确路径给谁使用？</strong></p>
<ul>
<li>给浏览器使用：需要添加虚拟目录（项目访问路径）（<strong>重定向是浏览器完成的，需要加上虚拟目录</strong>）</li>
<li>服务器端使用：不需要添加虚拟目录（<strong>请求转发是在服务器内部完成的，不需要添加虚拟目录</strong>）</li>
</ul>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810120447.png" width=40%></div>

<p>&lt;a href&#x3D;”路径”、&lt;form action&#x3D;”路径”，<strong>都需要添加虚拟目录，因为它们都是浏览器的行为，是浏览器做出的动作</strong></p>
<p><strong>重定向中动态获取虚拟目录，降低代码的耦合度</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespsonseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1...&quot;</span>);</span><br><span class="line"><span class="comment">//        // 重定向</span></span><br><span class="line"><span class="comment">//        // 1. 设置响应状态码 302</span></span><br><span class="line"><span class="comment">//        response.setStatus(302);</span></span><br><span class="line"><span class="comment">//        // 2. 设置响应头 Location, value为重定向的资源路径，注意这里要加上项目的目录</span></span><br><span class="line"><span class="comment">//        response.setHeader(&quot;Location&quot;, &quot;/web-demo1/resp2&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化重定向</span></span><br><span class="line">        <span class="comment">// 动态获取虚拟目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">        response.sendRedirect(contextPath + <span class="string">&quot;/resp2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Response响应字符数据"><a href="#Response响应字符数据" class="headerlink" title="Response响应字符数据"></a>Response响应字符数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应字符数据：设置字符数据的响应体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespsonseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 简化content-type设置写法，一定要在获取流之前设置字符格式</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// text/html是让浏览器按照html文件解析，charset=utf-8是为了解决中文乱码问题</span></span><br><span class="line">        <span class="comment">// 获取字符输出流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// response是服务器向浏览器输出数据</span></span><br><span class="line">        <span class="comment">// content-type</span></span><br><span class="line"><span class="comment">//        response.setHeader(&quot;content-type&quot;, &quot;text/html&quot;);</span></span><br><span class="line">        <span class="comment">// 设置content-type告诉浏览器响应的数据类型是html格式的，浏览器才能按照html进行解析</span></span><br><span class="line">        <span class="comment">// 如果不设置，浏览器只会按照纯文本进行解析</span></span><br><span class="line">        writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;h1&gt;aaa&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 中文乱码问题：通过Response获取的字符输出流默认编码为：ISO-8859-1</span></span><br><span class="line">        writer.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 细节：字符流writer不要关闭，因为这个writer流是由response对象产生的</span></span><br><span class="line">        <span class="comment">// 随着响应结束，当response对象被销毁后，writer流也会被服务器关闭</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Response响应字节数据"><a href="#Response响应字节数据" class="headerlink" title="Response响应字节数据"></a>Response响应字节数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应字节数据：设置字节数据的响应体，字节数据：图片、视频、音频</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespsonseDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./a.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取response字节输出流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"><span class="comment">//        // 3. 完成流的copy</span></span><br><span class="line"><span class="comment">//        byte[] buff = new byte[1024];</span></span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while ((len = fis.read(buff)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//            os.write(buff, 0, len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用IOUtils工具类，简化流的操作，在pom.xml中添加commons-io依赖</span></span><br><span class="line">        IOUtils.copy(fis, os);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只用关闭文件流，response字节输出流待响应完成后，response对象被销毁，由服务器关闭</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pom.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-用户登录-amp-用户注册"><a href="#案例-用户登录-amp-用户注册" class="headerlink" title="案例-用户登录 &amp; 用户注册"></a>案例-用户登录 &amp; 用户注册</h3><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ol>
<li>用户在登录页面输入用户名和密码，提交请求给LoginServlet</li>
<li>在LoginServlet中接收请求和数据[用户名和密码]</li>
<li>在LoginServlt中通过Mybatis实现调用UserMapper来根据用户名和密码查询数据库表</li>
<li>将查询的结果封装到User对象中进行返回</li>
<li>在LoginServlet中判断返回的User对象是否为null</li>
<li>如果为nul，说明根据用户名和密码没有查询到用户，则登录失败，返回”登录失败”数据给前端</li>
<li>如果不为null,则说明用户存在并且密码正确，则登录成功，返回”登录成功”数据给前端</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/1628865728305.png" width=100%></div>

<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol>
<li>将静态页面拷贝到项目的webapp目录下</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810125623.png" width=30%></div>

<ol start="2">
<li>创建db1数据库，创建tb_user表，创建User实体类</li>
</ol>
<p>tb_user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user(</span><br><span class="line">                        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">                        username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>,</span><br><span class="line">                        password <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(username,password) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123&#x27;</span>),(<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;234&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_user;</span><br></pre></td></tr></table></figure>

<p>User实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在项目的pom.xml导入Mybatis和Mysql驱动坐标</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--一定要添加作用范围--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建mybatis-config.xml核心配置文件，UserMapper.xml映射文件，UserMapper接口(忘了的话可以看之前的Mybatis教程)</li>
</ol>
<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包扫描方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mxeron.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--%amp是&amp;的转义字符，单独的&amp;，在xml环境下是不被识别的--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;801299&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql的映射文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/mxeron/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--和sql映射文件同一目录，可以直接导入--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mapper代理方式，使用包扫描更方便加载，扫描包后自动识别出里面的映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mxeron.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用前提：Mapper接口名和SQL映射文件名相同，且在同一目录下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace：名称空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mxeron.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/20220810132059.png" width=40%></div>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol>
<li>在UserMapper接口中提供一个根据用户名和密码查询用户对象的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为方便这里使用注解进行sql语句的设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码查询用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>改造login.html登录页面，填上相应的Servlet地址：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/login.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loginDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--action后写servlet地址，form表单是浏览器操作的行为，所以要添加虚拟目录--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--现在是html静态页面，不能动态获取虚拟目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web-demo1/loginServlet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;subDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login up&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>没有账号？点击注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写LoginServlet.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxeron.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxeron.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mxeron.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/loginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用mybatis完成查询</span></span><br><span class="line">        <span class="comment">// 2.1 获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="comment">// 2.2 获取SqlSession对象</span></span><br><span class="line">        <span class="comment">// 2.3 获取Mappper</span></span><br><span class="line">        <span class="comment">// 2.4 调用方法</span></span><br><span class="line">        <span class="comment">// 2.5 释放资源</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;  <span class="comment">// 就放在resources中</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行sql，传入名称空间+sql的id名</span></span><br><span class="line">        <span class="comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新：代理开发，获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.select(username, password);</span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字符输出流，并设置content-type，解决中文乱码问题</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 3. 判断user是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            writer.write(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 登陆失败</span></span><br><span class="line">            writer.write(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h4><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ol>
<li>用户填写用户名、密码等信息，点击注册按钮，提交到RegisterServlet</li>
<li>在RegisterServlet中使用MyBatis保存数据</li>
<li>保存前，需要判断用户名是否已经存在（根据用户名查询数据库）</li>
</ol>
<div align="center"><img src="https://for-my-picgo.oss-cn-chengdu.aliyuncs.com/blogs/pictures/1628867904783.png" width=100%></div>

<ol>
<li>用户在注册页面输入用户名和密码，提交请求给RegisterServlet</li>
<li>在RegisterServlet中接收请求和数据[用户名和密码]</li>
<li>在RegisterServlet中通过Mybatis实现调用UserMapper来根据用户名查询数据库表</li>
<li>将查询的结果封装到User对象中进行返回</li>
<li>在RegisterServlet中判断返回的User对象是否为null</li>
<li>如果为nul，说明根据用户名可用，则调用UserMapper来实现添加用户</li>
<li>如果不为null,则说明用户不可以，返回”用户名已存在”数据给前端</li>
</ol>
<h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ol>
<li>编写UserMapper提供根据用户名查询用户数据方法和添加用户方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户名查询用户对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">selectByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into tb_user values(null,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改register.html</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/register.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>已有帐号？<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;reg-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/request-demo/registerServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;注 册&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reg_btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建RegisterServlet类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/registerServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 接收用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装用户对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 调用mapper 根据用户名查询用户对象</span></span><br><span class="line">        <span class="comment">//2.1 获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//2.2 获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//2.3 获取Mapper</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4 调用方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userMapper.selectByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 判断用户对象释放为null</span></span><br><span class="line">        <span class="keyword">if</span>( u == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 用户名不存在，添加用户</span></span><br><span class="line">            userMapper.add(user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用户名存在，给出提示信息</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动服务器进行测试</li>
</ol>
<h4 id="SqlSessionFactory工具类抽取"><a href="#SqlSessionFactory工具类抽取" class="headerlink" title="SqlSessionFactory工具类抽取"></a>SqlSessionFactory工具类抽取</h4><p>上面两个功能已经实现，但是在写Servlet的时候，因为需要使用Mybatis来完成数据库的操作，所以对于Mybatis的基础操作就出现了些重复代码，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure>

<p>有了这些重复代码就会造成一些问题:</p>
<ul>
<li>重复代码不利于后期的维护</li>
<li>SqlSessionFactory工厂进行重复创建<ul>
<li>就相当于每次买手机都需要重新创建一个手机生产工厂来给你制造一个手机一样，资源消耗非常大但性能却非常低，所以这么做是不允许的</li>
</ul>
</li>
</ul>
<p><strong>那如何来优化呢？</strong></p>
<ul>
<li>代码重复可以抽取工具类</li>
<li>对指定代码只需要执行一次可以使用静态代码块(只创建一次工厂)，静态代码块随着类的加载执行，且只执行一次</li>
</ul>
<p><strong>有了这两个方向后，代码具体该如何编写?</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块会随着类的加载而自动执行，且只执行一次</span></span><br><span class="line">        <span class="comment">// 静态代码块内不能抛出异常，只能catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/loginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用mybatis完成查询</span></span><br><span class="line">        <span class="comment">// 2.1 获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="comment">// 2.2 获取SqlSession对象</span></span><br><span class="line">        <span class="comment">// 2.3 获取Mappper</span></span><br><span class="line">        <span class="comment">// 2.4 调用方法</span></span><br><span class="line">        <span class="comment">// 2.5 释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line"><span class="comment">//        String resource = &quot;mybatis-config.xml&quot;;  // 就放在resources中</span></span><br><span class="line"><span class="comment">//        InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用SqlSessionFactory工具类来加载SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取SqlSession对象，用来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行sql，传入名称空间+sql的id名</span></span><br><span class="line">        <span class="comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新：代理开发，获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.select(username, password);</span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字符输出流，并设置content-type，解决中文乱码问题</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 3. 判断user是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            writer.write(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 登陆失败</span></span><br><span class="line">            writer.write(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();</span><br></pre></td></tr></table></figure>

<p>这样就可以很好的解决上面所说的代码重复和重复创建工厂导致性能低的问题了。</p>
<p><strong>注意，sqlSession对象是用户与数据库的连接，不能够像sqlSessionFactory抽象成工具类，因为不可能多个功能都使用同一个连接！</strong></p>
<ol>
<li>SqlSession是MyBatis的关键对象,是执行持久化操作的独享,类似于JDBC中的Connection</li>
<li>它是应用程序与持久层之间执行交互操作的一个单线程对象,也是MyBatis执行持久化操作的关键对象</li>
<li>SqlSession对象完全包含以数据库为背景的所有执行SQL操作的方法,它的底层封装了JDBC连接,可以用SqlSession实例来直接执行被映射的SQL语句</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SqlSession对象，用来执行sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
</search>
